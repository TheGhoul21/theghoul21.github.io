[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Sono Luca, e come dico spesso: solo un povero cog**one. Scherzi a parte, sono un programmatore con 16 anni di esperienza. Ho iniziato a sviluppare piccoli siti per privati nel novembre 2009, poi ho lavorato per cinque anni come full stack developer presso Digitalfun S.r.l.\nNel novembre 2014, mentre lavoravo ancora in DF, ho co-fondato una startup con mio cugino e un terzo socio. Due mesi dopo mi sono trasferito a Londra in cerca di opportunit√†, dove ho lavorato per un anno come backend developer in SaveWaterSaveMoney Ltd, utilizzando Symfony.\nNel luglio 2016 sono tornato in Italia e ho iniziato a lavorare in Nohup S.r.l. come full stack developer, ricoprendo il ruolo di R&D Team Leader nell‚Äôultimo anno.\nMi sono laureato presso l‚ÄôUniversit√† degli Studi Guglielmo Marconi, un‚Äôuniversit√† telematica. Attualmente, sono uno studente part-time del corso magistrale in Artificial Intelligence all‚ÄôUniversit√† degli Studi di Udine. Dopo la mia esperienza alla Marconi, ho deciso di affrontare il percorso magistrale con un ritmo pi√π sostenibile.\nSono appassionato di tecnologia, scienza e insegnamento. Il mio pi√π grande sogno nel cassetto √® diventare insegnante di materie scientifiche.\n\n\n\n\nI‚Äôm Luca, and as I often say: just a poor dum**ss. Jokes aside, I‚Äôve been a programmer for 16 years. I started developing small websites for private clients in November 2009, then spent five years as a full stack developer at Digitalfun S.r.l.\nIn November 2014, while still working at DF, I co-founded a startup with my cousin and a third partner. Two months later, I moved to London to seek new opportunities and worked for a year as a backend developer at SaveWaterSaveMoney Ltd, using Symfony.\nIn July 2016, I returned to Italy and joined Nohup S.r.l. as a full stack developer, eventually becoming the R&D Team Leader in my final year.\nI earned my degree from Universit√† degli Studi Guglielmo Marconi, an online university. Currently, I‚Äôm a part-time Master‚Äôs student in Artificial Intelligence at the University of Udine. After my experience at Marconi, I decided to take the Master‚Äôs program at a more sustainable pace.\nI‚Äôm passionate about technology, science, and teaching. My biggest dream is to become a teacher in scientific subjects."
  },
  {
    "objectID": "about.html#about-me",
    "href": "about.html#about-me",
    "title": "About",
    "section": "",
    "text": "Sono Luca, e come dico spesso: solo un povero cog**one. Scherzi a parte, sono un programmatore con 16 anni di esperienza. Ho iniziato a sviluppare piccoli siti per privati nel novembre 2009, poi ho lavorato per cinque anni come full stack developer presso Digitalfun S.r.l.\nNel novembre 2014, mentre lavoravo ancora in DF, ho co-fondato una startup con mio cugino e un terzo socio. Due mesi dopo mi sono trasferito a Londra in cerca di opportunit√†, dove ho lavorato per un anno come backend developer in SaveWaterSaveMoney Ltd, utilizzando Symfony.\nNel luglio 2016 sono tornato in Italia e ho iniziato a lavorare in Nohup S.r.l. come full stack developer, ricoprendo il ruolo di R&D Team Leader nell‚Äôultimo anno.\nMi sono laureato presso l‚ÄôUniversit√† degli Studi Guglielmo Marconi, un‚Äôuniversit√† telematica. Attualmente, sono uno studente part-time del corso magistrale in Artificial Intelligence all‚ÄôUniversit√† degli Studi di Udine. Dopo la mia esperienza alla Marconi, ho deciso di affrontare il percorso magistrale con un ritmo pi√π sostenibile.\nSono appassionato di tecnologia, scienza e insegnamento. Il mio pi√π grande sogno nel cassetto √® diventare insegnante di materie scientifiche.\n\n\n\n\nI‚Äôm Luca, and as I often say: just a poor dum**ss. Jokes aside, I‚Äôve been a programmer for 16 years. I started developing small websites for private clients in November 2009, then spent five years as a full stack developer at Digitalfun S.r.l.\nIn November 2014, while still working at DF, I co-founded a startup with my cousin and a third partner. Two months later, I moved to London to seek new opportunities and worked for a year as a backend developer at SaveWaterSaveMoney Ltd, using Symfony.\nIn July 2016, I returned to Italy and joined Nohup S.r.l. as a full stack developer, eventually becoming the R&D Team Leader in my final year.\nI earned my degree from Universit√† degli Studi Guglielmo Marconi, an online university. Currently, I‚Äôm a part-time Master‚Äôs student in Artificial Intelligence at the University of Udine. After my experience at Marconi, I decided to take the Master‚Äôs program at a more sustainable pace.\nI‚Äôm passionate about technology, science, and teaching. My biggest dream is to become a teacher in scientific subjects."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "L‚Äôs blog",
    "section": "",
    "text": "Hashing: Che Cos‚Äô√® ‚Äôsto Hashing?\n\n\n\n\n\n\ncomputer science\n\n\n\n\n\n\n\n\n\nFeb 7, 2025\n\n\nLuca Simonetti\n\n\n\n\n\n\n\n\n\n\n\n\nBlockchain: Non Solo Criptovalute\n\n\n\n\n\n\ncomputer science\n\n\n\n\n\n\n\n\n\nFeb 2, 2025\n\n\nLuca Simonetti\n\n\n\n\n\n\n\n\n\n\n\n\nGruppi di Ordine Primo\n\n\n\n\n\n\nmath\n\n\ncryptography\n\n\nalgebra\n\n\n\n\n\n\n\n\n\nFeb 1, 2025\n\n\nLuca Simonetti\n\n\n\n\n\n\n\n\n\n\n\n\nShamir‚Äôs Secret Sharing\n\n\n\n\n\n\nprogramming\n\n\nweb development\n\n\n\n\n\n\n\n\n\nJan 30, 2025\n\n\nLuca Simonetti\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/hashing.html",
    "href": "blog/hashing.html",
    "title": "Hashing: Che Cos‚Äô√® ‚Äôsto Hashing?",
    "section": "",
    "text": "Se hai mai sentito parlare di password, sicurezza informatica o anche solo di blockchain (di cui abbiamo parlato la settimana scorsa, se te lo sei perso sei un pirla), probabilmente ti sei imbattuto in questa parola: hashing. Ma che cavolo √® sta roba? Sembra il nome di una nuova droga sintetica o di un ballo di gruppo degli anni ‚Äô80. In realt√†, √® una figata (nel senso buono, non come quando ti dicono ‚Äúche figata le tue Crocs üòê‚Äù). In questo articolo voglio spiegare (spero) in parole semplici cosa √® l‚Äôhashing, perch√© √® importante e perch√© conviene smettere di usare password di merda come ‚Äúpassword123‚Äù.\n\n\nPartiamo dalle basi, come quando a scuola di cucina ti spiegano come si le uova fritte (eppure, ahim√©, anche riesce a fare un disastro‚Ä¶).\nImmagina di avere una di quelle macchinette per fare la carne trita, hai presente? Ci metti dentro un pezzo di carne, giri la manovella e dall‚Äôaltra parte esce carne trita. Ecco, l‚Äôhashing √® un po‚Äô come quella macchinetta, ma per i dati.\n\nAh, figo, quindi se ci metto dentro un PDF esce‚Ä¶ un PDF tritato?\n\nMinchia, sei simpatico, ti uccider√≤ per ultimo. No, non proprio. Non trita i dati nel senso che li spezzetta. Ma in un certo senso li trasforma. La macchinetta dell‚Äôhashing prende qualsiasi tipo di dato (un testo, un‚Äôimmagine, un video, un file intero, la tua lista di maleducate) e lo trasforma in una stringa (una sequnza, ma in gergo si chiama stringa) di caratteri di lunghezza fissa, che all‚Äôapparenza √® completamente casuale. Questa stringa (sequenza) di caratteri √® chiamata hash (o ‚Äúvalore hash‚Äù, o ‚Äúdigest‚Äù, insomma, chiamala come cazzo ti pare, basta che ci capiamo).\n\nOk, ok, ci sono quasi. Ma perch√© dovrebbe servirmi trasformare i miei dati in una stringa di caratteri a caso? Che me ne faccio? Ci tappezzo il cesso?\n\nCalma, non fare il fenomeno, che cazzo hai mangiato a colazione?! L‚Äôhash ha delle propriet√† molto particolari che lo rendono decisamente utile. In ordine (o no?):\n\n√à Deterministico: Se prendi lo stesso dato e lo passi alla stessa ‚Äúmacchinetta‚Äù (funzione di hash), otterrai sempre lo stesso identico hash. Sempre. Non importa quante volte lo fai, il risultato sar√† sempre lo stesso. √à come se la macchinetta avesse una memoria di ferro.\n\nQuindi se faccio l‚Äôhash della parola ‚Äúciao‚Äù ottengo sempre lo stesso hash?\n\nEsatto. Prova. Ci sono un sacco di siti online che fanno hash. Cerca ‚Äúonline hash calculator‚Äù, mettici ‚Äúciao‚Äù e usa l‚Äôalgoritmo SHA-256 (uno dei pi√π comuni). Vedrai che ti uscir√† sempre la stessa stringa di caratteri (tipo b133a0c0e9bee3be20163d2ad31d6248db292aa6dcb1ee087a2aa50e0fc75ae2, ma non ti fissare con questa stringa, √® solo un esempio).\n√à One-Way (A Senso Unico): Questa √® la parte veramente interessante e importante. √à praticamente impossibile (e dico praticamente perch√© nella vita nulla √® impossibile al 100%, tranne forse te che te ne stai a casa il sabato sera invece di andare a far baldoria con Salvini) tornare indietro dall‚Äôhash al dato originale. Cio√®, se hai l‚Äôhash, non puoi in alcun modo (se non per forza bruta) ricostruire il dato di partenza. √à come la macchinetta della carne trita: puoi fare la carne trita dalla carne, ma non puoi rifare il pezzo di carne dalla carne trita. Chiaro no?\n\nS√¨, s√¨, ho capito. Quindi se io faccio l‚Äôhash della mia password ‚Äúpassword123‚Äù, anche se qualcuno ruba l‚Äôhash, non pu√≤ risalire alla mia password?\n\nYES! Finalmente hai detto una roba giusta, porca troia. Ed √® proprio per questo che l‚Äôhashing √® fondamentale per la sicurezza delle password. Quando ti registri su un sito web e scegli una password, il sito non salva la tua password originale (sarebbe da cretini, se lo fanno prendi un martello). Bens√¨, salva solo l‚Äôhash della tua password. Quando poi fai il login e inserisci la tua password, il sito calcola l‚Äôhash della password che hai inserito e lo confronta con l‚Äôhash che ha salvato. Se i due hash coincidono, significa che hai inserito la password giusta, senza che il sito abbia mai dovuto conoscere la tua password in chiaro. Cos√¨ l‚Äôunico che in teoria sa la tua password sei tu (e la tua morosa‚Ä¶).\n√à Resistente alle Collisioni (Idealmente, come sempre): Questa √® un po‚Äô pi√π complicata, ma cercher√≤ di semplificare al massimo. Idealmente (ovvero nei mondi con le fate, le lucine eccetera), √® estremamente improbabile che due dati diversi producano lo stesso hash. Si chiama ‚Äúcollisione‚Äù quando due dati diversi producono lo stesso hash. Una buona funzione di hash √® progettata per rendere le collisioni praticamente impossibili (di nuovo, praticamente). √à come dire che √® quasi impossibile che due pezzi di carne diversi, messi nella stessa macchinetta, producano esattamente la stessa carne trita. Capito no? Pi√π o meno dai‚Ä¶\n\nPi√π o meno‚Ä¶ Ma quindi le collisioni possono succedere?\n\nS√¨, in teoria (e badate, che le cose che possono succedere in teoria anche con probabilit√† infime sono tante. Tipo che morite in un incidente d‚Äôauto, cos√¨, per dire.) possono succedere, ma con le funzioni di hash moderne e robuste, la probabilit√† √® talmente bassa che √® come vincere la lotteria 10 volte di fila mentre ti cade un meteorite in testa e Salvini dice una roba sensata. Insomma, per scopi pratici, possiamo dire che le collisioni sono trascurabili. Esistono per√≤ funzioni di hash pi√π vecchie e meno sicure che sono pi√π vulnerabili alle collisioni, ma c‚Äô√® gi√† troppa carne al fuoco (pun intended).\n\nRicapitolandolo:\nQuindi, ricapitolando, l‚Äôhashing √®:\n\nUna macchinetta per i dati: Prende qualsiasi dato e lo trasforma in una stringa di caratteri di lunghezza fissa (hash).\nDeterministico: Stesso dato, stesso hash, sempre.\nOne-Way: Impossibile (praticamente) tornare indietro dall‚Äôhash al dato originale.\nResistente alle Collisioni: Improbabile (molto improbabile) che due dati diversi producano lo stesso hash.\n\n\n\n\nOk, abbiamo capito che cos‚Äô√® l‚Äôhashing e le sue propriet√† magiche. Ma in pratica, a cosa serve? Oltre a proteggere le password (che √® gi√† una figata non da poco), l‚Äôhashing ha un sacco di altre applicazioni. Eccone alcune:\n\nVerifica dell‚ÄôIntegrit√† dei Dati: Immagina di scaricare un file enorme da internet, tipo un film in HD o un videogioco. Come fai a essere sicuro che il file che hai scaricato sia integro e non sia stato corrotto durante il download? Semplice: il sito web da cui hai scaricato il file di solito fornisce anche l‚Äôhash del file. Tu, dopo aver scaricato il file, puoi calcolare l‚Äôhash del file scaricato e confrontarlo con l‚Äôhash fornito dal sito. Se i due hash coincidono, significa che il file √® integro al 100%. Se non coincidono, significa che c‚Äô√® stato un problema durante il download e il file √® corrotto (o peggio, potrebbe essere stato manomesso da qualcuno). √à come avere un sigillo di garanzia digitale sul file. Figata, no?\nBlockchain e Criptovalute: Se hai letto l‚Äôarticolo sulla blockchain (e se non l‚Äôhai fatto, vergognati, tanto.), sai che l‚Äôhashing √® un ingrediente fondamentale della blockchain. Viene usato per creare l‚Äô‚Äúimpronta digitale‚Äù di ogni blocco e per collegare i blocchi in una catena immutabile. Senza l‚Äôhashing, la blockchain non esisterebbe. Quindi, se ti piacciono le criptovalute (o se le odi, non importa), sappi che devi ringraziare (o maledire) l‚Äôhashing.\nFirme Digitali: L‚Äôhashing √® anche usato nelle firme digitali per garantire l‚Äôautenticit√† e l‚Äôintegrit√† dei documenti digitali. Quando firmi digitalmente un documento, in realt√† stai firmando l‚Äôhash del documento, non il documento intero. Questo rende la firma molto pi√π efficiente e sicura.\nRicerca Efficiente di Dati: L‚Äôhashing pu√≤ essere usato per creare delle ‚Äútabelle hash‚Äù (o ‚Äúhash map‚Äù), che sono delle strutture dati che permettono di cercare dati in modo molto veloce. √à un po‚Äô come avere un indice di un libro: invece di dover sfogliare tutto il libro per trovare un‚Äôinformazione, puoi consultare l‚Äôindice e trovarla subito.\n\n\n\n\nAnche l‚Äôhashing, come tutte le cose belle della vita, tipo me, ha i suoi limiti:\n\nCollisioni (anche se improbabili): Abbiamo detto che le collisioni sono molto improbabili, ma non impossibili. In teoria, un attaccante potrebbe cercare di trovare due dati diversi che producono lo stesso hash (un ‚Äúattacco di collisione‚Äù). Se ci riuscisse, potrebbe usare questa collisione per scopi malevoli, tipo sostituire un file legittimo con uno fasullo che ha lo stesso hash. Per fortuna, trovare collisioni per le funzioni di hash moderne e robuste √® estremamente difficile e costoso, ma √® un rischio teorico da tenere presente.\nAttacchi di ‚ÄúRainbow Table‚Äù e ‚ÄúBrute Force‚Äù alle Password: Anche se l‚Äôhashing rende difficile risalire alla password originale dall‚Äôhash, non √® una protezione infallibile al 100%. Esistono tecniche come gli attacchi di ‚Äúrainbow table‚Äù e ‚Äúbrute force‚Äù che possono essere usate per cercare di ‚Äúindovinare‚Äù le password a partire dagli hash. Le ‚Äúrainbow table‚Äù sono delle tabelle precalcolate che contengono gli hash di milioni di password comuni. Gli attacchi ‚Äúbrute force‚Äù invece consistono nel provare a calcolare l‚Äôhash di tutte le possibili password finch√© non si trova una corrispondenza con l‚Äôhash rubato. Per difendersi da questi attacchi, √® fondamentale usare password lunghe, complesse e diverse per ogni sito. E smettetela di usare ‚Äúpassword123‚Äù, che cazzo!\nNon √® Crittografia: √à importante capire che l‚Äôhashing non √® crittografia. La crittografia serve per nascondere i dati, rendendoli illeggibili a chi non ha la chiave giusta. L‚Äôhashing serve per creare un‚Äôimpronta digitale dei dati, per verificarne l‚Äôintegrit√† e l‚Äôautenticit√†. E‚Äô importante non confondere le due cose. √à come confondere un lucchetto (crittografia) con un sigillo di ceralacca (hashing). Entrambi servono per la sicurezza, ma in modi diversi.\n\n\n\n\nL‚Äôhashing √® una tecnologia che sta alla base nel mondo digitale di oggi e di un sacco di cose che usiamo tutti i giorni, dalle password alla blockchain, dalla verifica dell‚Äôintegrit√† dei file alle firme digitali. √à una tecnologia potente e versatile, ma √® importante conoscerne anche i limiti e le potenziali vulnerabilit√†.\nLa prossima volta che sentirai parlare di hashing pensa alla macchinetta per la carne trita dei dati, alla one-way, e alla sicurezza che pu√≤ garantire. E soprattutto, smettila di usare password di merda! Grazie per l‚Äôattenzione e alla prossima settimana con un altro argomento nerd e (spero) interessante.\n\n\n\nGiusto per fare i fighi e per farti capire ancora meglio la potenza dell‚Äôhashing, ho calcolato l‚Äôhash SHA-256 di questo articolo (in formato testo semplice, senza HTML o altre formattazioni). Ecco l‚Äôhash:\n31e452bbf5134ac1d0d0a3a5897359b83eaccf6a46aed7d4323ddb51ec2d76f0\nOra, se io modificassi anche solo una virgola di questo articolo, anche solo uno spazio bianco, anche solo una lettera, l‚Äôhash cambierebbe completamente. Questo dimostra quanto anche una piccola modifica al dato originale cambi radicalmente l‚Äôhash. √à proprio questa propriet√† che rende l‚Äôhashing cos√¨ utile per la verifica dell‚Äôintegrit√† dei dati. E anche per farmi sentire un grande (imbecille) a scrivere un post scriptum del genere. Ciao stelline!"
  },
  {
    "objectID": "blog/hashing.html#che-cos√®-in-parole-povere-lhashing",
    "href": "blog/hashing.html#che-cos√®-in-parole-povere-lhashing",
    "title": "Hashing: Che Cos‚Äô√® ‚Äôsto Hashing?",
    "section": "",
    "text": "Partiamo dalle basi, come quando a scuola di cucina ti spiegano come si le uova fritte (eppure, ahim√©, anche riesce a fare un disastro‚Ä¶).\nImmagina di avere una di quelle macchinette per fare la carne trita, hai presente? Ci metti dentro un pezzo di carne, giri la manovella e dall‚Äôaltra parte esce carne trita. Ecco, l‚Äôhashing √® un po‚Äô come quella macchinetta, ma per i dati.\n\nAh, figo, quindi se ci metto dentro un PDF esce‚Ä¶ un PDF tritato?\n\nMinchia, sei simpatico, ti uccider√≤ per ultimo. No, non proprio. Non trita i dati nel senso che li spezzetta. Ma in un certo senso li trasforma. La macchinetta dell‚Äôhashing prende qualsiasi tipo di dato (un testo, un‚Äôimmagine, un video, un file intero, la tua lista di maleducate) e lo trasforma in una stringa (una sequnza, ma in gergo si chiama stringa) di caratteri di lunghezza fissa, che all‚Äôapparenza √® completamente casuale. Questa stringa (sequenza) di caratteri √® chiamata hash (o ‚Äúvalore hash‚Äù, o ‚Äúdigest‚Äù, insomma, chiamala come cazzo ti pare, basta che ci capiamo).\n\nOk, ok, ci sono quasi. Ma perch√© dovrebbe servirmi trasformare i miei dati in una stringa di caratteri a caso? Che me ne faccio? Ci tappezzo il cesso?\n\nCalma, non fare il fenomeno, che cazzo hai mangiato a colazione?! L‚Äôhash ha delle propriet√† molto particolari che lo rendono decisamente utile. In ordine (o no?):\n\n√à Deterministico: Se prendi lo stesso dato e lo passi alla stessa ‚Äúmacchinetta‚Äù (funzione di hash), otterrai sempre lo stesso identico hash. Sempre. Non importa quante volte lo fai, il risultato sar√† sempre lo stesso. √à come se la macchinetta avesse una memoria di ferro.\n\nQuindi se faccio l‚Äôhash della parola ‚Äúciao‚Äù ottengo sempre lo stesso hash?\n\nEsatto. Prova. Ci sono un sacco di siti online che fanno hash. Cerca ‚Äúonline hash calculator‚Äù, mettici ‚Äúciao‚Äù e usa l‚Äôalgoritmo SHA-256 (uno dei pi√π comuni). Vedrai che ti uscir√† sempre la stessa stringa di caratteri (tipo b133a0c0e9bee3be20163d2ad31d6248db292aa6dcb1ee087a2aa50e0fc75ae2, ma non ti fissare con questa stringa, √® solo un esempio).\n√à One-Way (A Senso Unico): Questa √® la parte veramente interessante e importante. √à praticamente impossibile (e dico praticamente perch√© nella vita nulla √® impossibile al 100%, tranne forse te che te ne stai a casa il sabato sera invece di andare a far baldoria con Salvini) tornare indietro dall‚Äôhash al dato originale. Cio√®, se hai l‚Äôhash, non puoi in alcun modo (se non per forza bruta) ricostruire il dato di partenza. √à come la macchinetta della carne trita: puoi fare la carne trita dalla carne, ma non puoi rifare il pezzo di carne dalla carne trita. Chiaro no?\n\nS√¨, s√¨, ho capito. Quindi se io faccio l‚Äôhash della mia password ‚Äúpassword123‚Äù, anche se qualcuno ruba l‚Äôhash, non pu√≤ risalire alla mia password?\n\nYES! Finalmente hai detto una roba giusta, porca troia. Ed √® proprio per questo che l‚Äôhashing √® fondamentale per la sicurezza delle password. Quando ti registri su un sito web e scegli una password, il sito non salva la tua password originale (sarebbe da cretini, se lo fanno prendi un martello). Bens√¨, salva solo l‚Äôhash della tua password. Quando poi fai il login e inserisci la tua password, il sito calcola l‚Äôhash della password che hai inserito e lo confronta con l‚Äôhash che ha salvato. Se i due hash coincidono, significa che hai inserito la password giusta, senza che il sito abbia mai dovuto conoscere la tua password in chiaro. Cos√¨ l‚Äôunico che in teoria sa la tua password sei tu (e la tua morosa‚Ä¶).\n√à Resistente alle Collisioni (Idealmente, come sempre): Questa √® un po‚Äô pi√π complicata, ma cercher√≤ di semplificare al massimo. Idealmente (ovvero nei mondi con le fate, le lucine eccetera), √® estremamente improbabile che due dati diversi producano lo stesso hash. Si chiama ‚Äúcollisione‚Äù quando due dati diversi producono lo stesso hash. Una buona funzione di hash √® progettata per rendere le collisioni praticamente impossibili (di nuovo, praticamente). √à come dire che √® quasi impossibile che due pezzi di carne diversi, messi nella stessa macchinetta, producano esattamente la stessa carne trita. Capito no? Pi√π o meno dai‚Ä¶\n\nPi√π o meno‚Ä¶ Ma quindi le collisioni possono succedere?\n\nS√¨, in teoria (e badate, che le cose che possono succedere in teoria anche con probabilit√† infime sono tante. Tipo che morite in un incidente d‚Äôauto, cos√¨, per dire.) possono succedere, ma con le funzioni di hash moderne e robuste, la probabilit√† √® talmente bassa che √® come vincere la lotteria 10 volte di fila mentre ti cade un meteorite in testa e Salvini dice una roba sensata. Insomma, per scopi pratici, possiamo dire che le collisioni sono trascurabili. Esistono per√≤ funzioni di hash pi√π vecchie e meno sicure che sono pi√π vulnerabili alle collisioni, ma c‚Äô√® gi√† troppa carne al fuoco (pun intended).\n\nRicapitolandolo:\nQuindi, ricapitolando, l‚Äôhashing √®:\n\nUna macchinetta per i dati: Prende qualsiasi dato e lo trasforma in una stringa di caratteri di lunghezza fissa (hash).\nDeterministico: Stesso dato, stesso hash, sempre.\nOne-Way: Impossibile (praticamente) tornare indietro dall‚Äôhash al dato originale.\nResistente alle Collisioni: Improbabile (molto improbabile) che due dati diversi producano lo stesso hash."
  },
  {
    "objectID": "blog/hashing.html#ma-a-che-cazzo-serve-veramente-lhashing",
    "href": "blog/hashing.html#ma-a-che-cazzo-serve-veramente-lhashing",
    "title": "Hashing: Che Cos‚Äô√® ‚Äôsto Hashing?",
    "section": "",
    "text": "Ok, abbiamo capito che cos‚Äô√® l‚Äôhashing e le sue propriet√† magiche. Ma in pratica, a cosa serve? Oltre a proteggere le password (che √® gi√† una figata non da poco), l‚Äôhashing ha un sacco di altre applicazioni. Eccone alcune:\n\nVerifica dell‚ÄôIntegrit√† dei Dati: Immagina di scaricare un file enorme da internet, tipo un film in HD o un videogioco. Come fai a essere sicuro che il file che hai scaricato sia integro e non sia stato corrotto durante il download? Semplice: il sito web da cui hai scaricato il file di solito fornisce anche l‚Äôhash del file. Tu, dopo aver scaricato il file, puoi calcolare l‚Äôhash del file scaricato e confrontarlo con l‚Äôhash fornito dal sito. Se i due hash coincidono, significa che il file √® integro al 100%. Se non coincidono, significa che c‚Äô√® stato un problema durante il download e il file √® corrotto (o peggio, potrebbe essere stato manomesso da qualcuno). √à come avere un sigillo di garanzia digitale sul file. Figata, no?\nBlockchain e Criptovalute: Se hai letto l‚Äôarticolo sulla blockchain (e se non l‚Äôhai fatto, vergognati, tanto.), sai che l‚Äôhashing √® un ingrediente fondamentale della blockchain. Viene usato per creare l‚Äô‚Äúimpronta digitale‚Äù di ogni blocco e per collegare i blocchi in una catena immutabile. Senza l‚Äôhashing, la blockchain non esisterebbe. Quindi, se ti piacciono le criptovalute (o se le odi, non importa), sappi che devi ringraziare (o maledire) l‚Äôhashing.\nFirme Digitali: L‚Äôhashing √® anche usato nelle firme digitali per garantire l‚Äôautenticit√† e l‚Äôintegrit√† dei documenti digitali. Quando firmi digitalmente un documento, in realt√† stai firmando l‚Äôhash del documento, non il documento intero. Questo rende la firma molto pi√π efficiente e sicura.\nRicerca Efficiente di Dati: L‚Äôhashing pu√≤ essere usato per creare delle ‚Äútabelle hash‚Äù (o ‚Äúhash map‚Äù), che sono delle strutture dati che permettono di cercare dati in modo molto veloce. √à un po‚Äô come avere un indice di un libro: invece di dover sfogliare tutto il libro per trovare un‚Äôinformazione, puoi consultare l‚Äôindice e trovarla subito."
  },
  {
    "objectID": "blog/hashing.html#non-√®-tutto-rose-e-fiori-o-hash-e-fiori-in-questo-caso",
    "href": "blog/hashing.html#non-√®-tutto-rose-e-fiori-o-hash-e-fiori-in-questo-caso",
    "title": "Hashing: Che Cos‚Äô√® ‚Äôsto Hashing?",
    "section": "",
    "text": "Anche l‚Äôhashing, come tutte le cose belle della vita, tipo me, ha i suoi limiti:\n\nCollisioni (anche se improbabili): Abbiamo detto che le collisioni sono molto improbabili, ma non impossibili. In teoria, un attaccante potrebbe cercare di trovare due dati diversi che producono lo stesso hash (un ‚Äúattacco di collisione‚Äù). Se ci riuscisse, potrebbe usare questa collisione per scopi malevoli, tipo sostituire un file legittimo con uno fasullo che ha lo stesso hash. Per fortuna, trovare collisioni per le funzioni di hash moderne e robuste √® estremamente difficile e costoso, ma √® un rischio teorico da tenere presente.\nAttacchi di ‚ÄúRainbow Table‚Äù e ‚ÄúBrute Force‚Äù alle Password: Anche se l‚Äôhashing rende difficile risalire alla password originale dall‚Äôhash, non √® una protezione infallibile al 100%. Esistono tecniche come gli attacchi di ‚Äúrainbow table‚Äù e ‚Äúbrute force‚Äù che possono essere usate per cercare di ‚Äúindovinare‚Äù le password a partire dagli hash. Le ‚Äúrainbow table‚Äù sono delle tabelle precalcolate che contengono gli hash di milioni di password comuni. Gli attacchi ‚Äúbrute force‚Äù invece consistono nel provare a calcolare l‚Äôhash di tutte le possibili password finch√© non si trova una corrispondenza con l‚Äôhash rubato. Per difendersi da questi attacchi, √® fondamentale usare password lunghe, complesse e diverse per ogni sito. E smettetela di usare ‚Äúpassword123‚Äù, che cazzo!\nNon √® Crittografia: √à importante capire che l‚Äôhashing non √® crittografia. La crittografia serve per nascondere i dati, rendendoli illeggibili a chi non ha la chiave giusta. L‚Äôhashing serve per creare un‚Äôimpronta digitale dei dati, per verificarne l‚Äôintegrit√† e l‚Äôautenticit√†. E‚Äô importante non confondere le due cose. √à come confondere un lucchetto (crittografia) con un sigillo di ceralacca (hashing). Entrambi servono per la sicurezza, ma in modi diversi."
  },
  {
    "objectID": "blog/hashing.html#quindi",
    "href": "blog/hashing.html#quindi",
    "title": "Hashing: Che Cos‚Äô√® ‚Äôsto Hashing?",
    "section": "",
    "text": "L‚Äôhashing √® una tecnologia che sta alla base nel mondo digitale di oggi e di un sacco di cose che usiamo tutti i giorni, dalle password alla blockchain, dalla verifica dell‚Äôintegrit√† dei file alle firme digitali. √à una tecnologia potente e versatile, ma √® importante conoscerne anche i limiti e le potenziali vulnerabilit√†.\nLa prossima volta che sentirai parlare di hashing pensa alla macchinetta per la carne trita dei dati, alla one-way, e alla sicurezza che pu√≤ garantire. E soprattutto, smettila di usare password di merda! Grazie per l‚Äôattenzione e alla prossima settimana con un altro argomento nerd e (spero) interessante."
  },
  {
    "objectID": "blog/hashing.html#post-scriptum-hash-di-sto-articolo",
    "href": "blog/hashing.html#post-scriptum-hash-di-sto-articolo",
    "title": "Hashing: Che Cos‚Äô√® ‚Äôsto Hashing?",
    "section": "",
    "text": "Giusto per fare i fighi e per farti capire ancora meglio la potenza dell‚Äôhashing, ho calcolato l‚Äôhash SHA-256 di questo articolo (in formato testo semplice, senza HTML o altre formattazioni). Ecco l‚Äôhash:\n31e452bbf5134ac1d0d0a3a5897359b83eaccf6a46aed7d4323ddb51ec2d76f0\nOra, se io modificassi anche solo una virgola di questo articolo, anche solo uno spazio bianco, anche solo una lettera, l‚Äôhash cambierebbe completamente. Questo dimostra quanto anche una piccola modifica al dato originale cambi radicalmente l‚Äôhash. √à proprio questa propriet√† che rende l‚Äôhashing cos√¨ utile per la verifica dell‚Äôintegrit√† dei dati. E anche per farmi sentire un grande (imbecille) a scrivere un post scriptum del genere. Ciao stelline!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Luca Simonetti, yet another idiot",
    "section": "",
    "text": "Luca Simonetti\n\n\nFeb 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLuca Simonetti\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLuca Simonetti\n\n\nFeb 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLuca Simonetti\n\n\nJan 30, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#blog",
    "href": "index.html#blog",
    "title": "Luca Simonetti, yet another idiot",
    "section": "",
    "text": "Luca Simonetti\n\n\nFeb 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLuca Simonetti\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLuca Simonetti\n\n\nFeb 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLuca Simonetti\n\n\nJan 30, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#projects",
    "href": "index.html#projects",
    "title": "Luca Simonetti, yet another idiot",
    "section": "Projects",
    "text": "Projects\n\n\n\n\n\n\n\n\n\n\nConnect 4\n\n\n\n\n\n\nLuca Simonetti\n\n\nJan 30, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHopfield Network Demo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOf RNNs: Ising, Hopfield, Math and Modernity\n\n\n\n\n\n\n\n\n\nFeb 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpatial Spike Neural Networks\n\n\n\n\n\n\nLuca Simonetti\n\n\nJan 30, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/hopfield.html#hopfield-network",
    "href": "projects/hopfield.html#hopfield-network",
    "title": "Hopfield Network Demo",
    "section": "Hopfield Network",
    "text": "Hopfield Network"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Research Projects",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 30, 2025\n\n\nConnect 4\n\n\nLuca Simonetti\n\n\n\n\n¬†\n\n\nHopfield Network Demo\n\n\n¬†\n\n\n\n\nFeb 3, 2025\n\n\nOf RNNs: Ising, Hopfield, Math and Modernity\n\n\n¬†\n\n\n\n\nJan 30, 2025\n\n\nSpatial Spike Neural Networks\n\n\nLuca Simonetti\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/spatial-spike-neural-networks-it.html",
    "href": "projects/spatial-spike-neural-networks-it.html",
    "title": "Spatial Spike Neural Networks",
    "section": "",
    "text": "Voglio provare a studiare un tipo di rete neurale di cui non ho trovato citazioni in ambito di ricerca. Di base Una rete neurale spiking (SNN) √® un tipo di Neural Network che si avvicina maggiormente al funzionamento dei neuroni biologici. A differenza delle reti neurali tradizionali che trasmettono valori continui (ovvero fanno le moltiplicazioni direttamente), le SNN elaborano le informazioni attraverso ‚Äúspike‚Äù, ovvero eventi discreti nel tempo, rendendole computazionalmente pi√π efficienti. Queste reti codificano le informazioni nella temporizzazione e nella frequenza degli spike, consentendo loro di catturare dinamiche temporali complesse e potenzialmente imitare la capacit√† di apprendimento del cervello.\nL‚Äôelemento che voglio introdurre √® quello di strutture (basate su grafi) che includano all‚Äôinterno della rete anche il concetto di vicinanza dei neuroni della rete. Voglio inoltre provare a comprendere se i neuroni possono spostarsi all‚Äôinterno della struttura a grafo.\nIn altre parole: do una struttura alla rete, come ad esempio delle strutture simili a quelle cristalline, e posiziono i neuroni. Man mano che apprendono pattern all‚Äôinterno dei dati, li faccio muovere seguendo la struttura data, seguendo l‚Äôapprendimento Hebbiano\n\n\n\n\nüáÆüáπ Mentre mi preparavo la camomilla con la melatonina ieri sera ho visualizzato per un istante la rete che ho in mente come una specie di struttura che si adatta all‚Äôinput che riceve. Pu√≤ essere realizzata una roba del genere? Pu√≤ l‚Äôinput guidare il movimento dei neuroni? Devo ancora capire bene cosa ho visto, ma quello che forse voglio realizzare √® un grafo con i neuroni posizionati dove devono stare. Quando ricevono un input (che potrebbe essere un vettore latente) si riorganizzano seguendo i percorsi obbligati dalla struttura per far s√¨ che neuroni che devono stare vicini restino vicini. Nulla vieta che i ‚Äúneuroni‚Äù possano in realt√† essere intere reti deep.\nüá¨üáß While I was preparing my chamomile with melatonin last night, I briefly visualized the network I have in mind as a kind of structure that adapts to the input it receives. Can such a thing be realized? Can the input guide the movement of the neurons? I still need to fully understand what I saw, but what I might want to create is a graph with neurons positioned where they need to be. When they receive an input (which could be a latent vector), they rearrange following the paths dictated by the structure to ensure that neurons that need to stay close remain close. Nothing prevents the ‚Äúneurons‚Äù from actually being entire deep networks.\n\n\n\nüáÆüáπ a colazione ho mangiato latte e cereali. Ho scaldato il latte nella pentolino, versato sui cereali caldo. Mangiato. Finto, metto nel lavandino la pentola e la ciotola dentro la pentola e butto un po‚Äô d‚Äôacqua cos√¨, come mi ha insegnato la mamma, √® pi√π facile lavare. Se metto la ciotola dentro la pentola, all‚Äôinterno della pentola l‚Äôacqua raggiunge prima il bordo superiore perch√© c‚Äô√® la ciotola a fare volume, cos√¨ posso usare meno acqua. Ovvero: avere qualcosa che riempe il volume permette di usare meno risorse. Pu√≤ essere utile? boh.\nüá¨üáß for breakfast I had milk and cereal. I heated the milk in the saucepan, poured it hot over the cereal. Ate. Finished, I put the saucepan in the sink and the bowl inside the saucepan and I put a bit of water in so that, like my mum taught me, it‚Äôs easier to wash up. If I put the bowl inside the saucepan, inside the saucepan the water reaches the top edge sooner because the bowl is taking up volume, so I can use less water. Basically: having something that fills the volume means you can use fewer resources. Could that be useful? Dunno."
  },
  {
    "objectID": "projects/spatial-spike-neural-networks-it.html#log",
    "href": "projects/spatial-spike-neural-networks-it.html#log",
    "title": "Spatial Spike Neural Networks",
    "section": "",
    "text": "üáÆüáπ Mentre mi preparavo la camomilla con la melatonina ieri sera ho visualizzato per un istante la rete che ho in mente come una specie di struttura che si adatta all‚Äôinput che riceve. Pu√≤ essere realizzata una roba del genere? Pu√≤ l‚Äôinput guidare il movimento dei neuroni? Devo ancora capire bene cosa ho visto, ma quello che forse voglio realizzare √® un grafo con i neuroni posizionati dove devono stare. Quando ricevono un input (che potrebbe essere un vettore latente) si riorganizzano seguendo i percorsi obbligati dalla struttura per far s√¨ che neuroni che devono stare vicini restino vicini. Nulla vieta che i ‚Äúneuroni‚Äù possano in realt√† essere intere reti deep.\nüá¨üáß While I was preparing my chamomile with melatonin last night, I briefly visualized the network I have in mind as a kind of structure that adapts to the input it receives. Can such a thing be realized? Can the input guide the movement of the neurons? I still need to fully understand what I saw, but what I might want to create is a graph with neurons positioned where they need to be. When they receive an input (which could be a latent vector), they rearrange following the paths dictated by the structure to ensure that neurons that need to stay close remain close. Nothing prevents the ‚Äúneurons‚Äù from actually being entire deep networks.\n\n\n\nüáÆüáπ a colazione ho mangiato latte e cereali. Ho scaldato il latte nella pentolino, versato sui cereali caldo. Mangiato. Finto, metto nel lavandino la pentola e la ciotola dentro la pentola e butto un po‚Äô d‚Äôacqua cos√¨, come mi ha insegnato la mamma, √® pi√π facile lavare. Se metto la ciotola dentro la pentola, all‚Äôinterno della pentola l‚Äôacqua raggiunge prima il bordo superiore perch√© c‚Äô√® la ciotola a fare volume, cos√¨ posso usare meno acqua. Ovvero: avere qualcosa che riempe il volume permette di usare meno risorse. Pu√≤ essere utile? boh.\nüá¨üáß for breakfast I had milk and cereal. I heated the milk in the saucepan, poured it hot over the cereal. Ate. Finished, I put the saucepan in the sink and the bowl inside the saucepan and I put a bit of water in so that, like my mum taught me, it‚Äôs easier to wash up. If I put the bowl inside the saucepan, inside the saucepan the water reaches the top edge sooner because the bowl is taking up volume, so I can use less water. Basically: having something that fills the volume means you can use fewer resources. Could that be useful? Dunno."
  },
  {
    "objectID": "projects/connect4.html",
    "href": "projects/connect4.html",
    "title": "Connect 4",
    "section": "",
    "text": "Research & Development Diary\nVoglio applicare il metodo DPO a una rete RNN. Creer√≤ una struttura composta da tre elementi che interagiscono tra loro:\n\nuna RNN che ha appreso solo le regole del gioco (banalmente sequenze di partite random)\nuna rete che apprende tramite DPO a discernere tra una mossa giusta e una sbagliata\nuna rete che apprende ad apprendere, che adatta i parametri della rete 1. in base alla situazione/stato corrente."
  },
  {
    "objectID": "projects/prese-rnn.html#recurrent-neural-networks",
    "href": "projects/prese-rnn.html#recurrent-neural-networks",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Recurrent Neural Networks",
    "text": "Recurrent Neural Networks"
  },
  {
    "objectID": "projects/prese-rnn.html#physics-foundations",
    "href": "projects/prese-rnn.html#physics-foundations",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Physics Foundations",
    "text": "Physics Foundations\n\n1925: The Ising Model laid groundwork for understanding dynamic systems.\n\nConcept: A mathematical model of ferromagnetism in statistical mechanics.\nRelevance: Introduced ideas of interacting components and system states evolving over time, conceptually related to dynamic systems later explored in RNNs."
  },
  {
    "objectID": "projects/prese-rnn.html#hopfield-networks",
    "href": "projects/prese-rnn.html#hopfield-networks",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Hopfield Networks",
    "text": "Hopfield Networks\n\n1982: Hopfield Networks introduced associative memory structures.\n\nConcept: A type of recurrent neural network that serves as a content-addressable ‚Äúassociative memory‚Äù system.\nRelevance: Demonstrated the potential of recurrent connections for memory and pattern completion, a precursor to RNNs for sequential data."
  },
  {
    "objectID": "projects/prese-rnn.html#formalizing-recurrent-networks-and-training",
    "href": "projects/prese-rnn.html#formalizing-recurrent-networks-and-training",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Formalizing Recurrent Networks and Training",
    "text": "Formalizing Recurrent Networks and Training\n\n1986: Recurrent Neural Networks (RNNs) were formalized.\n\nConcept: Neural networks with loops, allowing them to process sequences of inputs by maintaining a hidden state that carries information across time steps.\nRelevance: The birth of the RNN as we know it, designed to handle sequential data."
  },
  {
    "objectID": "projects/prese-rnn.html#backpropation-through-time",
    "href": "projects/prese-rnn.html#backpropation-through-time",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Backpropation Through Time",
    "text": "Backpropation Through Time\n\n1986: Backpropagation Through Time (BPTT) was developed for training RNNs.\n\nConcept: An adaptation of backpropagation algorithm to train RNNs by unfolding the network through time and then applying standard backpropagation.\nRelevance: Provided a practical method to train RNNs, enabling them to learn from sequential data."
  },
  {
    "objectID": "projects/prese-rnn.html#addressing-the-vanishing-gradient",
    "href": "projects/prese-rnn.html#addressing-the-vanishing-gradient",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Addressing the Vanishing Gradient",
    "text": "Addressing the Vanishing Gradient\n\n1997: LSTM networks addressed the vanishing gradient problem.\n\nConcept: Long Short-Term Memory networks, a special type of RNN with memory cells and gates that regulate information flow, designed to mitigate the vanishing gradient problem.\nRelevance: A major breakthrough that allowed RNNs to learn long-range dependencies in sequences, significantly improving performance on tasks like NLP."
  },
  {
    "objectID": "projects/prese-rnn.html#simplifying-and-maintaining-performance",
    "href": "projects/prese-rnn.html#simplifying-and-maintaining-performance",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Simplifying and Maintaining Performance",
    "text": "Simplifying and Maintaining Performance\n\n2014: GRUs simplified RNN structures while maintaining performance.\n\nConcept: Gated Recurrent Units, a simplified version of LSTMs with fewer gates, offering comparable performance with fewer parameters.\nRelevance: Provided a more efficient alternative to LSTMs in many cases, making RNNs more accessible and faster to train."
  },
  {
    "objectID": "projects/prese-rnn.html#modern-advancements",
    "href": "projects/prese-rnn.html#modern-advancements",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Modern Advancements",
    "text": "Modern Advancements\n\n2020: Modern LSTMs evolved for advanced applications like NLP and forecasting.\n\nConcept: Continued research and development on LSTMs and related architectures, incorporating attention mechanisms, transformers, and other advancements for state-of-the-art performance.\nRelevance: Highlights the ongoing evolution of RNNs and their continued relevance in cutting-edge applications, especially in natural language processing and time series forecasting."
  },
  {
    "objectID": "projects/prese-rnn.html#backpropagation-the-math",
    "href": "projects/prese-rnn.html#backpropagation-the-math",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Backpropagation: The Math",
    "text": "Backpropagation: The Math\nTo understand BPTT works, let‚Äôs derive its mathematical formulation."
  },
  {
    "objectID": "projects/prese-rnn.html#unfolding-the-rnn",
    "href": "projects/prese-rnn.html#unfolding-the-rnn",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Unfolding the RNN",
    "text": "Unfolding the RNN\n\nConsider an RNN that processes a sequence of inputs \\[( x_1, x_2, \\ldots, x_T )\\] At each time step \\(t\\), the RNN maintains a hidden state \\(h_t\\) which is updated based on the current input \\(x_t\\) and the previous hidden state \\(h_{t-1}\\):\n\\[h_t = f(W_h h_{t-1} + W_x x_t + b)\\]\nwhere \\(W_h\\) and \\(W_x\\) are weight matrices, \\(b\\) is a bias vector, and \\(f\\) is an activation function (typically tanh or ReLU)."
  },
  {
    "objectID": "projects/prese-rnn.html#loss-function",
    "href": "projects/prese-rnn.html#loss-function",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Loss Function",
    "text": "Loss Function\nAssume we have a loss function \\(L\\) that depends on the outputs of the RNN at each time step. The total loss over the sequence is:\n\\[L = \\sum_{t=1}^T L_t(y_t, \\hat{y}_t)\\]\nwhere \\(y_t\\) is the true output and \\(\\hat{y}_t\\) is the predicted output at time step \\(t\\)."
  },
  {
    "objectID": "projects/prese-rnn.html#backpropagation-through-time",
    "href": "projects/prese-rnn.html#backpropagation-through-time",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "Backpropagation Through Time",
    "text": "Backpropagation Through Time\nTo train the RNN, we need to compute the gradients of the loss with respect to the weights \\(W_h\\) and \\(W_x\\). BPTT involves unfolding the RNN through time and applying the chain rule of calculus to compute these gradients.\n\nForward Pass: Compute the hidden states \\(h_t\\) and the outputs \\(\\hat{y}_t\\) for \\(t = 1, 2, \\ldots, T\\).\nBackward Pass: Compute the gradients of the loss with respect to the hidden states and weights by propagating the error backwards through time.\nThe gradient of the loss with respect to the hidden state at time step \\(t\\) is:\n\\[\\frac{\\partial L}{\\partial h_t} = \\sum_{k=t}^T \\frac{\\partial L_k}{\\partial h_t}\\]\nUsing the chain rule, we can express this as:\n\\[\\frac{\\partial L_k}{\\partial h_t} = \\frac{\\partial L_k}{\\partial \\hat{y}_k} \\frac{\\partial \\hat{y}_k}{\\partial h_k} \\frac{\\partial h_k}{\\partial h_t}\\]\nThe gradient of the hidden state \\(h_k\\) with respect to \\(h_t\\) involves the recurrent connection:\n\\[\\frac{\\partial h_k}{\\partial h_t} = \\prod_{j=t+1}^k \\frac{\\partial h_j}{\\partial h_{j-1}}\\]\nFinally, the gradients of the loss with respect to the weights are computed by summing the contributions from each time step:\n\\[\\frac{\\partial L}{\\partial W_h} = \\sum_{t=1}^T \\frac{\\partial L}{\\partial h_t} \\frac{\\partial h_t}{\\partial W_h}\\]\n\\[\\frac{\\partial L}{\\partial W_x} = \\sum_{t=1}^T \\frac{\\partial L}{\\partial h_t} \\frac{\\partial h_t}{\\partial W_x}\\]"
  },
  {
    "objectID": "projects/prese-rnn.html#a-plot",
    "href": "projects/prese-rnn.html#a-plot",
    "title": "Of RNNs: Ising, Hopfield, Math and Modernity",
    "section": "A Plot",
    "text": "A Plot\n\nsunburst = {\n  const root = partition(flareData);\n  root.each(d =&gt; d.current = d);\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, width])\n      .style(\"font\", \"15px sans-serif\");\n\n  // ...remainder of implementation\n  \n  return svg.node();\n}"
  },
  {
    "objectID": "blog/sss.html",
    "href": "blog/sss.html",
    "title": "Shamir‚Äôs Secret Sharing",
    "section": "",
    "text": "Shamir‚Äôs Secret Sharing\nIn questo articolo mi voglio concentrare su una spiegazione (speriamo) dettagliata dell‚Äôalgoritmo Shamir‚Äôs Secret Sharing, provando ad illustrare sia la parte pi√π teorica che quella un po‚Äô pi√π pratica con degli esempi concreti. Allacciamo le cinture.\nFirst things first‚Ä¶\nLo Shamir‚Äôs Secret Sharing √® innanzitutto un algoritmo di secret sharing crittografico ideato da Adi Shamir nel 1979. Permette di dividere un segreto \\(S\\) (poi ci arriviamo a che cazpita si intende con un segreto) in \\(n\\) parti, chiamate shares (parti?), in maniera tale che, per ricostruire il segreto (aridajela) originale, sia necessario un numero minimo \\(k\\) (con \\(k \\leq n\\)) di queste shares. Questo schema √® anche conosciuto come threshold scheme \\((k, n)\\).\nQuindi:\n\nUn segreto viene diviso in \\(n\\) shares.\nAlmeno \\(k\\) shares sono necessarie per ricostruire l‚Äôintero segreto (magia).\nCon meno di \\(k\\) shares, il segreto non pu√≤ essere ricostruito (volevi eh!?), e non si ottiene alcuna informazione su di esso (propriet√† di information-theoretically secure).\n\nA che serve:\n\nKey Management: Distribuire una master key crittografica tra pi√π attori, in modo che un numero sufficiente di essi debba cooperare per utilizzarla.\nAccess Control: Dividere una secret key per l‚Äôaccesso a un sistema o a dei dati tra pi√π utenti.\nDistributed Storage: Distribuire i frammenti di un file criptato su pi√π server, in modo che un certo numero di server debba essere accessibile per decriptare il file.\nSecure Multi-Party Computation (MPC): Come building block per protocolli pi√π complessi.\nDividere i vocali della chat coi bro: Cos√¨ andiamo tutti in galera, non solo io.\n\nIn sostanza: un segreto √® qualcosa che vogliamo proteggere. Per esempio pu√≤ essere una chiave privata (una password dai‚Ä¶ senza fare tanto il fenomeno). Per√≤ vogliamo che non risieda in un unico punto bens√¨ che risieda in tanti luoghi fisici diversi. Per esempio un pezzo lo nascondo a casa mia, un pezzo dal salumiere, un pezzo dal gommista eccetera eccetera eccetera.\nA sto punto per√≤ prima o poi la password mi serve e visto che io ho la memoria di un pesce rosso devo andare dal salumiere. Ma lo trovo chiuso. E adesso? sono fottuto. Mi serve la mia password per comprare i filmini con le donne nude, come faccio?\nEh come faccio‚Ä¶ Con lo schema di Shamir‚Äôs non mi serve avere accesso a tutte le share, bens√¨ solo a un gruppo di esse. Ed √® qui appunto la magia.\nCome funziona?\nA livello puramente matematico, l‚Äôalgoritmo si basa sull‚Äôinterpolation polinomiale. L‚Äôidea chiave √® che, dati \\(k\\) punti in un piano, con ascisse distinte, esiste uno e un solo polinomio di grado al pi√π \\(k-1\\) che passa per tutti questi punti. Nel nostro caso, il grado del polinomio sar√† esattamente \\(k-1\\).\nEsempio con polinomio di grado 2 (k=3):\nPer ricostruire un polinomio di grado 2 (una parabola), sono necessari \\(k=3\\) punti. Qui sotto puoi interagire con un grafico che mostra questo concetto. Muovi i punti e osserva come cambia la parabola. Il termine noto del polinomio (il punto in cui la parabola interseca l‚Äôasse y) rappresenta il segreto.\n\n\nCode\nviewof x1 = Inputs.range([-4, 4], {step: 0.5, value: -2, label: \"x1\"})\nviewof y1 = Inputs.range([-5, 5], {step: 0.5, value: 4, label: \"y1\"})\nviewof x2 = Inputs.range([-4, 4], {step: 0.5, value: 2, label: \"x2\"})\nviewof y2 = Inputs.range([-5, 5], {step: 0.5, value: -4, label: \"y2\"})\nviewof x3 = Inputs.range([-4, 4], {step: 0.5, value: 3, label: \"x3\"})\nviewof y3 = Inputs.range([-5, 5], {step: 0.5, value: 4, label: \"y3\"})\n\n// Calculate coefficients function - simplified version using Cramer's rule\n// for the specific case of quadratic regression through 3 points\nfunction calculateCoeffs(x1, y1, x2, y2, x3, y3) {\n  // Matrix A entries for system Ax = b where x are the coefficients\n  const x1_2 = x1 * x1, x2_2 = x2 * x2, x3_2 = x3 * x3;\n  \n  // Determinant of matrix A\n  const detA = x1_2 * (x2 - x3) - x1 * (x2_2 - x3_2) + (x2_2 * x3 - x3_2 * x2);\n  \n  // Using Cramer's rule to solve the system\n  const a = (y1 * (x2 - x3) - x1 * (y2 - y3) + (y2 * x3 - y3 * x2)) / detA;\n  \n  const b = (x1_2 * (y2 - y3) - y1 * (x2_2 - x3_2) + (x2_2 * y3 - x3_2 * y2)) / detA;\n  \n  const c = (x1_2 * (x2 * y3 - x3 * y2) - x1 * (x2_2 * y3 - x3_2 * y2) + y1 * (x2_2 * x3 - x3_2 * x2)) / detA;\n  \n  return [a, b, c];\n}\n\n// Create the plot\n{\n  const width = 800;\n  const height = 600;\n  const margin = {top: 60, right: 40, bottom: 60, left: 60};\n  \n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto;\");\n  \n  const g = svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n  \n  // Set up scales\n  const xScale = d3.scaleLinear()\n    .domain([-10, 10])\n    .range([0, width - margin.left - margin.right]);\n  \n  const yScale = d3.scaleLinear()\n    .domain([-10, 10])\n    .range([height - margin.top - margin.bottom, 0]);\n  \n  // Add axes\n  g.append(\"g\")\n    .attr(\"transform\", `translate(0,${(height - margin.top - margin.bottom)/2})`)\n    .call(d3.axisBottom(xScale))\n    .attr(\"class\", \"axis\");\n  \n  g.append(\"g\")\n    .attr(\"transform\", `translate(${(width - margin.left - margin.right)/2},0)`)\n    .call(d3.axisLeft(yScale))\n    .attr(\"class\", \"axis\");\n  \n  // Add grid\n  g.append(\"g\")\n    .attr(\"class\", \"grid\")\n    .selectAll(\"line\")\n    .data(d3.range(-10, 10))\n    .join(\"line\")\n    .attr(\"x1\", d =&gt; xScale(d))\n    .attr(\"x2\", d =&gt; xScale(d))\n    .attr(\"y1\", 0)\n    .attr(\"y2\", height - margin.top - margin.bottom)\n    .attr(\"stroke\", \"#ddd\")\n    .attr(\"stroke-width\", 0.5);\n\n  g.append(\"g\")\n    .attr(\"class\", \"grid\")\n    .selectAll(\"line\")\n    .data(d3.range(-10, 10))\n    .join(\"line\")\n    .attr(\"y1\", d =&gt; yScale(d))\n    .attr(\"y2\", d =&gt; yScale(d))\n    .attr(\"x1\", 0)\n    .attr(\"x2\", width - margin.left - margin.right)\n    .attr(\"stroke\", \"#ddd\")\n    .attr(\"stroke-width\", 0.5);\n  \n  // Calculate parabola points\n  const coeffs = calculateCoeffs(x1, y1, x2, y2, x3, y3);\n  const xValues = d3.range(-5, 5.1, 0.1);\n  const parabola = xValues.map(x =&gt; ({\n    x: x,\n    y: coeffs[0] * x * x + coeffs[1] * x + coeffs[2]\n  }));\n  \n  // Draw parabola\n  const line = d3.line()\n    .x(d =&gt; xScale(d.x))\n    .y(d =&gt; yScale(d.y))\n    .curve(d3.curveNatural);\n  \n  g.append(\"path\")\n    .datum(parabola)\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"blue\")\n    .attr(\"stroke-width\", 2)\n    .attr(\"d\", line);\n  \n  // Add points\n  const points = [\n    {x: x1, y: y1},\n    {x: x2, y: y2},\n    {x: x3, y: y3}\n  ];\n  \n  g.selectAll(\"circle\")\n    .data(points)\n    .join(\"circle\")\n    .attr(\"cx\", d =&gt; xScale(d.x))\n    .attr(\"cy\", d =&gt; yScale(d.y))\n    .attr(\"r\", 8)\n    .attr(\"fill\", \"red\");\n  \n  // Add equation and secret value\n  const equation = `y = ${coeffs[0].toFixed(2)}x¬≤ + ${coeffs[1].toFixed(2)}x + ${coeffs[2].toFixed(2)}`;\n  g.append(\"text\")\n    .attr(\"x\", (width - margin.left - margin.right) / 2)\n    .attr(\"y\", -10)\n    .attr(\"text-anchor\", \"middle\")\n    .text(equation);\n  \n  g.append(\"text\")\n    .attr(\"x\", (width - margin.left - margin.right) / 2)\n    .attr(\"y\", -30)\n    .attr(\"text-anchor\", \"middle\")\n    .text(`Secret: ${coeffs[2].toFixed(2)}`);\n  \n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFasi dell‚Äôalgoritmo:\n\nSetup:\n\nSia \\(S\\) il segreto da condividere, rappresentato come un numero intero.\nSia \\(n\\) il numero di shares da generare.\nSia \\(k\\) il threshold, ovvero il numero minimo di shares necessarie per ricostruire il segreto.\nScegli un numero primo \\(p\\) maggiore di \\(S\\) e di \\(n\\). Tutte le operazioni aritmetiche saranno eseguite modulo \\(p\\) (in \\(\\mathbb{Z}_p\\)).\n\nShare Generation:\n\nScegli casualmente \\(k-1\\) coefficienti \\(a_1, a_2, \\dots, a_{k-1}\\), dove ogni \\(a_i\\) √® un numero intero in \\(\\mathbb{Z}_p\\).\nCostruisci il polinomio \\(P(x)\\) di grado \\(k-1\\):\n\n\\[P(x) = S + a_1x + a_2x^2 + \\dots + a_{k-1}x^{k-1}\\]\n\nNotare che il termine noto del polinomio √® il segreto \\(S\\) (\\(P(0) = S\\)).\nGenera \\(n\\) shares calcolando il valore del polinomio in \\(n\\) punti distinti non nulli. Ad esempio, si possono usare i punti \\(x = 1, 2, \\dots, n\\).\nLa share \\(i\\)-esima √® la coppia \\((x_i, y_i)\\), dove \\(x_i = i\\) e \\(y_i = P(i)\\).\n\nSecret Reconstruction:\n\nPer ricostruire il segreto, sono necessarie almeno \\(k\\) shares \\((x_i, y_i)\\).\nUtilizza l‚Äôinterpolation di Lagrange per ricostruire il polinomio \\(P(x)\\) a partire dai \\(k\\) punti. La formula di Lagrange √®:\n\n\\[P(x) = \\sum_{i=1}^{k} y_i \\prod_{j=1, j \\neq i}^{k} \\frac{x - x_j}{x_i - x_j}\\]\n\nUna volta ricostruito il polinomio \\(P(x)\\), il segreto \\(S\\) pu√≤ essere ottenuto valutando il polinomio in \\(x=0\\):\n\n\\[S = P(0)\\]\n\nEsempio (semplificato):\n\nSegreto: \\(S = 1234\\)\nNumero di shares: \\(n = 5\\)\nThreshold: \\(k = 3\\)\nNumero primo: \\(p = 1613\\) (maggiore di \\(S\\) e \\(n\\))\n\nShare Generation:\n\nScegliamo casualmente \\(k-1 = 2\\) coefficienti: \\(a_1 = 166\\), \\(a_2 = 94\\).\nIl polinomio √®: \\(P(x) = 1234 + 166x + 94x^2\\).\nGeneriamo 5 shares:\n\n\\(P(1) = 1234 + 166 \\cdot 1 + 94 \\cdot 1^2 = 1494 \\pmod{1613}\\) -&gt; \\((1, 1494)\\)\n\\(P(2) = 1234 + 166 \\cdot 2 + 94 \\cdot 2^2 = 1942 \\equiv 329 \\pmod{1613}\\) -&gt; \\((2, 329)\\)\n\\(P(3) = 1234 + 166 \\cdot 3 + 94 \\cdot 3^2 = 2578 \\equiv 965 \\pmod{1613}\\) -&gt; \\((3, 965)\\)\n\\(P(4) = 1234 + 166 \\cdot 4 + 94 \\cdot 4^2 = 3402 \\equiv 176 \\pmod{1613}\\) -&gt; \\((4, 176)\\)\n\\(P(5) = 1234 + 166 \\cdot 5 + 94 \\cdot 5^2 = 4414 \\equiv 1188 \\pmod{1613}\\) -&gt; \\((5, 1188)\\)\n\n\nSecret Reconstruction:\nSupponiamo di avere le shares: \\((1, 1494)\\), \\((3, 965)\\), \\((5, 1188)\\).\n\nUsiamo l‚Äôinterpolation di Lagrange per ricostruire il polinomio.\nDopo aver eseguito i calcoli (omessi per brevit√†), otteniamo \\(P(x) = 1234 + 166x + 94x^2\\).\nIl segreto √® \\(S = P(0) = 1234\\).\n\nPropriet√† di sicurezza:\n\nInformation-Theoretically Secure: Con meno di \\(k\\) shares, non si ottiene alcuna informazione sul segreto. Questo perch√© qualsiasi valore del segreto √® ugualmente probabile, dato un numero insufficiente di punti per determinare univocamente il polinomio.\nPerfect Secret Sharing: Ogni share √® grande quanto il segreto originale.\n\nLimitazioni:\n\nShare Size: Ogni share ha la stessa dimensione del segreto. Questo pu√≤ essere problematico se il segreto √® molto grande, per esempio un file.\nDealer Trust: Il dealer (chi genera le shares) conosce il segreto e deve essere fidato. E dunque potenzialmente rende questo inusabile in contesti come blockchain dove si potrebbe volere uno schema meno lasco dove la chiave privata (il segreto) non viene mai veramente materializzata completamente.\nStatic Threshold: Il valore di \\(k\\) (il threshold) √® fissato al momento della generazione delle shares. Ovvero se aumentano o diminuiscono i partecipanti bisogna rifare tutto sto giro da capo.\n\nConclusioni:\nWow. Che figata, loso. Lo Shamir‚Äôs Secret Sharing √® alla fine un algoritmo decisamente potent per la condivisione di segreti o chiavi private. Nonostante alcune limitazioni, rimane uno schema fondamentale nel campo della crittografia e della sicurezza informatica."
  },
  {
    "objectID": "blog/group-prime-order.html",
    "href": "blog/group-prime-order.html",
    "title": "Gruppi di Ordine Primo",
    "section": "",
    "text": "Una volta parlavo con un mio amico di Algebra astratta e ricordo che mi chiese se davvero esistesse qualcosa come l‚Äôalgebra astratta. Secondo lui l‚Äôaggettivo astratta era ridondante, visto che considerava l‚Äôalgebra di per s√© gi√† astratta. No.¬†Non √® cos√¨. Dovete sapere che ai matematici piace astrarre qualsiasi cosa. Ma c‚Äô√® un motivo se √® cos√¨ ed √® per dare delle definizioni formali, non assiomatiche di operazioni comuni per permettere (in algebre diverse da quelle che usiamo comunemente) di poter definire operazioni diverse ma con propriet√† simili.\n\n‚ÄúCazzo vuol dire? Parla potabile Luca.‚Äù\n\nC‚Äôhai ragione, calmati.\nA volte fa comodo sapere che gli oggeti matematici con cui lavoriamo hanno delle propriet√† definite, dimostrate da teoremi.\nPerch√©? Perch√© cos√¨ si possono creare approcci nuovi, algoritmi, schemi e compagnia cantante senza dover dimostrare la loro fondatezza dalle basi, ma assumendo per esempio di partire con oggetti matematici noti.\nUn esempio di questo genere di oggetti matematici sono i gruppi. Esiste tutto un filone di matematica chiamato Teoria dei gruppi che si occupa di dimostrare, scoprire e studiare tutto ci√≤ che riguarda i Gruppi.\nOk ma che caz sono ‚Äôsti benedetti gruppi? E perch√© ci servono?\nCalmati, di nuovo.\nPrima di arrivare al cuore dell‚Äôargomento di questo post, i gruppi di ordine primo, conviene costruire prima una base, partendo dalla definizione stessa di gruppo.\nUn gruppo √® un insieme non vuoto, che possiamo chiamare come ci pare, ma chiamaremo \\(G\\) (che sta per \\(Giancarlo\\)), dotato di un‚Äôoperazione binaria, che spesso indicheremo con \\(\\cdot\\) (ma potrebbe essere +, *, o altro a seconda del contesto o di come vi svegliate la mattina. E i matematici lo fanno.). Per essere un gruppo, questa coppia \\((G, \\cdot)\\) deve soddisfare quattro propriet√† fondamentali, i cosiddetti assiomi di gruppo:\n\nChiusura: Per ogni coppia di elementi \\(a\\) e \\(b\\) appartenenti a \\(G\\), il risultato dell‚Äôoperazione \\(a \\cdot b\\) deve essere ancora un elemento di \\(G\\). In simboli: se \\(a, b \\in G\\), allora \\(a \\cdot b \\in G\\). Questo significa che l‚Äôoperazione non ci ‚Äúporta fuori‚Äù dall‚Äôinsieme \\(G\\).\nAssociativit√†: L‚Äôoperazione deve essere associativa. Questo significa che per ogni terna di elementi \\(a, b, c\\) in \\(G\\), l‚Äôordine in cui eseguiamo le operazioni non cambia il risultato: \\((a \\cdot b) \\cdot c = a \\cdot (b \\cdot c)\\).\nElemento Neutro (Identit√†): Esiste un elemento speciale in \\(G\\), che chiamiamo elemento neutro (o identit√†), solitamente indicato con \\(e\\) (o \\(1\\) in notazione moltiplicativa, \\(0\\) in notazione additiva). Questo elemento ha la propriet√† che, per ogni elemento \\(a\\) in \\(G\\), \\(a \\cdot e = e \\cdot a = a\\). L‚Äôelemento neutro si comporta come un ‚Äúnon-operazione‚Äù.\nElemento Inverso: Per ogni elemento \\(a\\) in \\(G\\), esiste un altro elemento in \\(G\\), chiamato inverso di \\(a\\), che indicheremo con \\(a^{-1}\\) (o \\(-a\\) in notazione additiva). L‚Äôelemento inverso ha la propriet√† che quando operato con \\(a\\) d√† come risultato l‚Äôelemento neutro: \\(a \\cdot a^{-1} = a^{-1} \\cdot a = e\\).\n\nSe un gruppo soddisfa anche la propriet√† commutativa, cio√® se per ogni coppia di elementi \\(a, b \\in G\\), \\(a \\cdot b = b \\cdot a\\), allora il gruppo √® detto gruppo abeliano (o commutativo). Se la propriet√† commutativa non vale per tutti gli elementi, il gruppo √® detto non-abeliano.\n\n\nIo ho gi√† perso per strada met√† dei lettori. Dico met√† perch√© sono un inguaribile ottimista. In realt√† se stai ancora leggendo forse sei l‚Äôunico che ha avuto il fegato di farlo. Quindi bravo.\nCome ricompnensa, vediamo alcuni esempi un po‚Äô pi√π concreti:\n\nI numeri interi con l‚Äôaddizione (\\((\\mathbb{Z}, +)\\)): L‚Äôinsieme dei numeri interi \\(\\mathbb{Z} = \\{..., -2, -1, 0, 1, 2, ...\\}\\) con l‚Äôoperazione di addizione usuale (+) forma un gruppo abeliano.\n\nChiusura: La somma di due numeri interi √® sempre un numero intero. 3 + 19 = 21 dove 3, 19 e 21 \\(\\in \\mathbb{Z}\\)\nAssociativit√†: L‚Äôaddizione √® associativa: \\((a + b) + c = a + (b + c)\\). Roba da seconda elementare, forza, su.\nElemento Neutro: L‚Äôelemento neutro √® lo zero (0), poich√© \\(a + 0 = 0 + a = a\\) per ogni intero \\(a\\).\nElemento Inverso: L‚Äôinverso di un intero \\(a\\) √® \\(-a\\), poich√© \\(a + (-a) = (-a) + a = 0\\).\nAbeliano: L‚Äôaddizione √® commutativa: \\(a + b = b + a\\).\n\nI numeri razionali non nulli con la moltiplicazione (\\((\\mathbb{Q} \\setminus \\{0\\}, \\cdot)\\)): L‚Äôinsieme dei numeri razionali escluso lo zero, con l‚Äôoperazione di moltiplicazione usuale (\\(\\cdot\\)), forma un gruppo abeliano.\n\nChiusura: Il prodotto di due numeri razionali non nulli √® ancora un numero razionale non nullo.\nAssociativit√†: La moltiplicazione √® associativa: \\((a \\cdot b) \\cdot c = a \\cdot (b \\cdot c)\\).\nElemento Neutro: L‚Äôelemento neutro √® uno (1), poich√© \\(a \\cdot 1 = 1 \\cdot a = a\\) per ogni razionale non nullo \\(a\\).\nElemento Inverso: L‚Äôinverso di un razionale non nullo \\(a = \\frac{p}{q}\\) (con \\(p, q \\neq 0\\)) √® \\(a^{-1} = \\frac{q}{p}\\).\nAbeliano: La moltiplicazione √® commutativa: \\(a \\cdot b = b \\cdot a\\).\n\nIl gruppo simmetrico \\(S_n\\) (per \\(n \\ge 3\\)): Questo √® un esempio di gruppo non-abeliano. \\(S_n\\) √® il gruppo delle permutazioni di \\(n\\) oggetti, con l‚Äôoperazione di composizione di funzioni. Per \\(n \\ge 3\\), la composizione di permutazioni non √® commutativa in generale.\n\nQuindi, riassumendo un pochino: un gruppo √® semplicemente l‚Äôastrazione di quello che noi usiamo ogni giorno per contare quanti soldi ci sono rimasti sul conto e scoprire di essere molto povery. Per essere definito un gruppo ha bisogno di due elementi: un insieme (non vuoto altrimenti grazie al cazzo) e un‚Äôoperazione binaria (operazione binaria=tra due operandi). Facile no? Ecco, adesso complichiamo le cose.\n\n\n\nInnanzitutto introduciamo un nuovo termine: l‚Äôordine. L‚Äôordine pu√≤ essere definito sia sul gruppo nella sua interezza, sia solo sull‚Äôelemento.\n\nL‚Äôordine di un gruppo \\(G\\), indicato con \\(|G|\\), non √® altro che il numero di elementi contenuti nell‚Äôinsieme \\(G\\). Se il numero di elementi √® finito, si dice che il gruppo √® finito, altrimenti √® infinito (minchia, la fantasia dei matematici eh!?). Gli esempi \\((\\mathbb{Z}, +)\\) e \\((\\mathbb{Q} \\setminus \\{0\\}, \\cdot)\\) sono gruppi infiniti, mentre il gruppo simmetrico \\(S_n\\) √® un gruppo finito di ordine \\(n!\\).\nL‚Äôordine di un elemento \\(g\\) in un gruppo \\(G\\) √® il pi√π piccolo intero positivo \\(k\\) tale che \\(g^k = e\\), dove \\(e\\) √® l‚Äôelemento neutro del gruppo e \\(g^k\\) indica l‚Äôoperazione di \\(g\\) con se stesso \\(k\\) volte (ad esempio, in notazione moltiplicativa, \\(g^k = g \\cdot g \\cdot ... \\cdot g\\) (\\(k\\) volte); in notazione additiva, \\(kg = g + g + ... + g\\) (\\(k\\) volte)). Se tale intero positivo non esiste, si dice che l‚Äôelemento \\(g\\) ha ordine infinito.\n\nNah nah nah nah‚Ä¶ ferma tutto. Il primo √® chiaro e semplice. Il secondo non si capisce un tubo. Fammi un esempio.\nConsideriamo il gruppo \\((\\mathbb{Z}_4, +_4)\\), che √® il gruppo degli interi modulo 4 sotto l‚Äôoperazione di addizione modulo 4.\nEh!?\nL‚Äôelemento neutro in \\((\\mathbb{Z}_4, +_4)\\) √® lo 0, perch√© per ogni elemento \\(a \\in \\mathbb{Z}_4\\), si ha \\(a +_4 0 = 0 +_4 a = a\\). Eh vabb√® fin qua.\n\nCos‚Äô√® \\(\\mathbb{Z}_4\\)? √à l‚Äôinsieme \\(\\{0, 1, 2, 3\\}\\). Facile, ok.\nCos‚Äô√® \\(+_4\\)? √à l‚Äôaddizione modulo 4. Ad esempio, \\(2 +_4 3 = 5 \\pmod{4} = 1\\). Eh!?\n\nL‚Äôadidzione modulo 4 √® semplicemente una addizione che quando ‚Äúsfora‚Äù il 4 ricomincia da zero. Che uno pu√≤ immaginare sia una roba incasinatissima e invece no, perch√© volendo √® concettualmente simila a quello che fai dalla terza elementare quando fai le somme ma alle elementari lo chiamavi ‚Äúriporto‚Äù1. \\(8+4\\) quanto fa? \\(12\\), emb√©?\nS√¨, ma come ci siamo arrivati a far comparire una seconda cifra l√¨? Arriviamoci passo passo: \\(8 + 1 = 9\\).\nOk e fin qua‚Ä¶\n\\(9 + 1\\)? Non ho pi√π numeri a una cifra, allora cosa faccio? Ricomincio dallo zero, aggiungo uno davanti e continuo. Quindi: \\(9 + 1 = 10\\).\n\\(10 + 1 = 11\\).\n\\(11 + 1 = 12\\)\nL‚Äôaddizione modulo \\(n\\) la facciamo dalla seconda elementare senza manco saperlo\nNell‚Äôesempio di sopra il \\(2\\) di \\(12\\) si ottiene in termini di addizione modulo 10 con: \\[8 +_{10} 4 = 12 \\pmod{10} = 2\\]\nOk, andiamo avanti.\nOra, prendiamo un elemento a caso da \\(\\mathbb{Z}_4\\), ad esempio l‚Äôelemento 2. Vogliamo trovare l‚Äôordine dell‚Äôelemento 2. Dobbiamo trovare il pi√π piccolo intero positivo \\(k\\) tale che \\(k \\cdot 2 = 0\\) (ricorda che in notazione additiva, \\(g^k\\) diventa \\(k \\cdot g\\)). Qui, l‚Äôoperazione √® l‚Äôaddizione modulo 4, quindi stiamo cercando il pi√π piccolo \\(k\\) tale che:\n\\(2 +_4 2 +_4 \\ldots +_4 2\\) (\\(k\\) volte) \\(= 0 \\pmod{4}\\)\nIn altre parole, stiamo cercando il pi√π piccolo intero positivo \\(k\\) tale che \\(k \\times 2\\) sia un multiplo di 4. Vediamo un po‚Äô:\n\nPer \\(k = 1\\): \\(1 \\cdot 2 = 2 \\pmod{4} = 2 \\neq 0\\).\nPer \\(k = 2\\): \\(2 \\cdot 2 = 2 +_4 2 = 4 \\pmod{4} = 0\\).\n\nVAMOS! L‚Äôabbiamo trovato! Il pi√π piccolo intero positivo \\(k\\) per cui \\(k \\cdot 2 = 0 \\pmod{4}\\) √® \\(k = 2\\).\nQuindi, l‚Äôordine dell‚Äôelemento 2 nel gruppo \\((\\mathbb{Z}_4, +_4)\\) √® 2.\nProviamo con un altro elemento, ad esempio l‚Äôelemento 1. Vogliamo trovare il pi√π piccolo intero positivo \\(k\\) tale che \\(k \\cdot 1 = 0 \\pmod{4}\\).\n\nPer \\(k = 1\\): \\(1 \\cdot 1 = 1 \\pmod{4} = 1 \\neq 0\\).\nPer \\(k = 2\\): \\(2 \\cdot 1 = 1 +_4 1 = 2 \\pmod{4} = 2 \\neq 0\\).\nPer \\(k = 3\\): \\(3 \\cdot 1 = 1 +_4 1 +_4 1 = 3 \\pmod{4} = 3 \\neq 0\\).\nPer \\(k = 4\\): \\(4 \\cdot 1 = 1 +_4 1 +_4 1 +_4 1 = 4 \\pmod{4} = 0\\).\n\nIl pi√π piccolo intero positivo \\(k\\) per cui \\(k \\cdot 1 = 0 \\pmod{4}\\) √® \\(k = 4\\).\nQuindi, l‚Äôordine dell‚Äôelemento 1 nel gruppo \\((\\mathbb{Z}_4, +_4)\\) √® 4.\nFantastico. Finora era tutto bello e semplice. Ora scendiamo un po‚Äô nell‚Äôabisso."
  },
  {
    "objectID": "blog/group-prime-order.html#introduzione-ai-gruppi-le-fondamenta-dellalgebra-astratta",
    "href": "blog/group-prime-order.html#introduzione-ai-gruppi-le-fondamenta-dellalgebra-astratta",
    "title": "Gruppi di Ordine Primo",
    "section": "",
    "text": "Una volta parlavo con un mio amico di Algebra astratta e ricordo che mi chiese se davvero esistesse qualcosa come l‚Äôalgebra astratta. Secondo lui l‚Äôaggettivo astratta era ridondante, visto che considerava l‚Äôalgebra di per s√© gi√† astratta. No.¬†Non √® cos√¨. Dovete sapere che ai matematici piace astrarre qualsiasi cosa. Ma c‚Äô√® un motivo se √® cos√¨ ed √® per dare delle definizioni formali, non assiomatiche di operazioni comuni per permettere (in algebre diverse da quelle che usiamo comunemente) di poter definire operazioni diverse ma con propriet√† simili.\n\n‚ÄúCazzo vuol dire? Parla potabile Luca.‚Äù\n\nC‚Äôhai ragione, calmati.\nA volte fa comodo sapere che gli oggeti matematici con cui lavoriamo hanno delle propriet√† definite, dimostrate da teoremi.\nPerch√©? Perch√© cos√¨ si possono creare approcci nuovi, algoritmi, schemi e compagnia cantante senza dover dimostrare la loro fondatezza dalle basi, ma assumendo per esempio di partire con oggetti matematici noti.\nUn esempio di questo genere di oggetti matematici sono i gruppi. Esiste tutto un filone di matematica chiamato Teoria dei gruppi che si occupa di dimostrare, scoprire e studiare tutto ci√≤ che riguarda i Gruppi.\nOk ma che caz sono ‚Äôsti benedetti gruppi? E perch√© ci servono?\nCalmati, di nuovo.\nPrima di arrivare al cuore dell‚Äôargomento di questo post, i gruppi di ordine primo, conviene costruire prima una base, partendo dalla definizione stessa di gruppo.\nUn gruppo √® un insieme non vuoto, che possiamo chiamare come ci pare, ma chiamaremo \\(G\\) (che sta per \\(Giancarlo\\)), dotato di un‚Äôoperazione binaria, che spesso indicheremo con \\(\\cdot\\) (ma potrebbe essere +, *, o altro a seconda del contesto o di come vi svegliate la mattina. E i matematici lo fanno.). Per essere un gruppo, questa coppia \\((G, \\cdot)\\) deve soddisfare quattro propriet√† fondamentali, i cosiddetti assiomi di gruppo:\n\nChiusura: Per ogni coppia di elementi \\(a\\) e \\(b\\) appartenenti a \\(G\\), il risultato dell‚Äôoperazione \\(a \\cdot b\\) deve essere ancora un elemento di \\(G\\). In simboli: se \\(a, b \\in G\\), allora \\(a \\cdot b \\in G\\). Questo significa che l‚Äôoperazione non ci ‚Äúporta fuori‚Äù dall‚Äôinsieme \\(G\\).\nAssociativit√†: L‚Äôoperazione deve essere associativa. Questo significa che per ogni terna di elementi \\(a, b, c\\) in \\(G\\), l‚Äôordine in cui eseguiamo le operazioni non cambia il risultato: \\((a \\cdot b) \\cdot c = a \\cdot (b \\cdot c)\\).\nElemento Neutro (Identit√†): Esiste un elemento speciale in \\(G\\), che chiamiamo elemento neutro (o identit√†), solitamente indicato con \\(e\\) (o \\(1\\) in notazione moltiplicativa, \\(0\\) in notazione additiva). Questo elemento ha la propriet√† che, per ogni elemento \\(a\\) in \\(G\\), \\(a \\cdot e = e \\cdot a = a\\). L‚Äôelemento neutro si comporta come un ‚Äúnon-operazione‚Äù.\nElemento Inverso: Per ogni elemento \\(a\\) in \\(G\\), esiste un altro elemento in \\(G\\), chiamato inverso di \\(a\\), che indicheremo con \\(a^{-1}\\) (o \\(-a\\) in notazione additiva). L‚Äôelemento inverso ha la propriet√† che quando operato con \\(a\\) d√† come risultato l‚Äôelemento neutro: \\(a \\cdot a^{-1} = a^{-1} \\cdot a = e\\).\n\nSe un gruppo soddisfa anche la propriet√† commutativa, cio√® se per ogni coppia di elementi \\(a, b \\in G\\), \\(a \\cdot b = b \\cdot a\\), allora il gruppo √® detto gruppo abeliano (o commutativo). Se la propriet√† commutativa non vale per tutti gli elementi, il gruppo √® detto non-abeliano.\n\n\nIo ho gi√† perso per strada met√† dei lettori. Dico met√† perch√© sono un inguaribile ottimista. In realt√† se stai ancora leggendo forse sei l‚Äôunico che ha avuto il fegato di farlo. Quindi bravo.\nCome ricompnensa, vediamo alcuni esempi un po‚Äô pi√π concreti:\n\nI numeri interi con l‚Äôaddizione (\\((\\mathbb{Z}, +)\\)): L‚Äôinsieme dei numeri interi \\(\\mathbb{Z} = \\{..., -2, -1, 0, 1, 2, ...\\}\\) con l‚Äôoperazione di addizione usuale (+) forma un gruppo abeliano.\n\nChiusura: La somma di due numeri interi √® sempre un numero intero. 3 + 19 = 21 dove 3, 19 e 21 \\(\\in \\mathbb{Z}\\)\nAssociativit√†: L‚Äôaddizione √® associativa: \\((a + b) + c = a + (b + c)\\). Roba da seconda elementare, forza, su.\nElemento Neutro: L‚Äôelemento neutro √® lo zero (0), poich√© \\(a + 0 = 0 + a = a\\) per ogni intero \\(a\\).\nElemento Inverso: L‚Äôinverso di un intero \\(a\\) √® \\(-a\\), poich√© \\(a + (-a) = (-a) + a = 0\\).\nAbeliano: L‚Äôaddizione √® commutativa: \\(a + b = b + a\\).\n\nI numeri razionali non nulli con la moltiplicazione (\\((\\mathbb{Q} \\setminus \\{0\\}, \\cdot)\\)): L‚Äôinsieme dei numeri razionali escluso lo zero, con l‚Äôoperazione di moltiplicazione usuale (\\(\\cdot\\)), forma un gruppo abeliano.\n\nChiusura: Il prodotto di due numeri razionali non nulli √® ancora un numero razionale non nullo.\nAssociativit√†: La moltiplicazione √® associativa: \\((a \\cdot b) \\cdot c = a \\cdot (b \\cdot c)\\).\nElemento Neutro: L‚Äôelemento neutro √® uno (1), poich√© \\(a \\cdot 1 = 1 \\cdot a = a\\) per ogni razionale non nullo \\(a\\).\nElemento Inverso: L‚Äôinverso di un razionale non nullo \\(a = \\frac{p}{q}\\) (con \\(p, q \\neq 0\\)) √® \\(a^{-1} = \\frac{q}{p}\\).\nAbeliano: La moltiplicazione √® commutativa: \\(a \\cdot b = b \\cdot a\\).\n\nIl gruppo simmetrico \\(S_n\\) (per \\(n \\ge 3\\)): Questo √® un esempio di gruppo non-abeliano. \\(S_n\\) √® il gruppo delle permutazioni di \\(n\\) oggetti, con l‚Äôoperazione di composizione di funzioni. Per \\(n \\ge 3\\), la composizione di permutazioni non √® commutativa in generale.\n\nQuindi, riassumendo un pochino: un gruppo √® semplicemente l‚Äôastrazione di quello che noi usiamo ogni giorno per contare quanti soldi ci sono rimasti sul conto e scoprire di essere molto povery. Per essere definito un gruppo ha bisogno di due elementi: un insieme (non vuoto altrimenti grazie al cazzo) e un‚Äôoperazione binaria (operazione binaria=tra due operandi). Facile no? Ecco, adesso complichiamo le cose.\n\n\n\nInnanzitutto introduciamo un nuovo termine: l‚Äôordine. L‚Äôordine pu√≤ essere definito sia sul gruppo nella sua interezza, sia solo sull‚Äôelemento.\n\nL‚Äôordine di un gruppo \\(G\\), indicato con \\(|G|\\), non √® altro che il numero di elementi contenuti nell‚Äôinsieme \\(G\\). Se il numero di elementi √® finito, si dice che il gruppo √® finito, altrimenti √® infinito (minchia, la fantasia dei matematici eh!?). Gli esempi \\((\\mathbb{Z}, +)\\) e \\((\\mathbb{Q} \\setminus \\{0\\}, \\cdot)\\) sono gruppi infiniti, mentre il gruppo simmetrico \\(S_n\\) √® un gruppo finito di ordine \\(n!\\).\nL‚Äôordine di un elemento \\(g\\) in un gruppo \\(G\\) √® il pi√π piccolo intero positivo \\(k\\) tale che \\(g^k = e\\), dove \\(e\\) √® l‚Äôelemento neutro del gruppo e \\(g^k\\) indica l‚Äôoperazione di \\(g\\) con se stesso \\(k\\) volte (ad esempio, in notazione moltiplicativa, \\(g^k = g \\cdot g \\cdot ... \\cdot g\\) (\\(k\\) volte); in notazione additiva, \\(kg = g + g + ... + g\\) (\\(k\\) volte)). Se tale intero positivo non esiste, si dice che l‚Äôelemento \\(g\\) ha ordine infinito.\n\nNah nah nah nah‚Ä¶ ferma tutto. Il primo √® chiaro e semplice. Il secondo non si capisce un tubo. Fammi un esempio.\nConsideriamo il gruppo \\((\\mathbb{Z}_4, +_4)\\), che √® il gruppo degli interi modulo 4 sotto l‚Äôoperazione di addizione modulo 4.\nEh!?\nL‚Äôelemento neutro in \\((\\mathbb{Z}_4, +_4)\\) √® lo 0, perch√© per ogni elemento \\(a \\in \\mathbb{Z}_4\\), si ha \\(a +_4 0 = 0 +_4 a = a\\). Eh vabb√® fin qua.\n\nCos‚Äô√® \\(\\mathbb{Z}_4\\)? √à l‚Äôinsieme \\(\\{0, 1, 2, 3\\}\\). Facile, ok.\nCos‚Äô√® \\(+_4\\)? √à l‚Äôaddizione modulo 4. Ad esempio, \\(2 +_4 3 = 5 \\pmod{4} = 1\\). Eh!?\n\nL‚Äôadidzione modulo 4 √® semplicemente una addizione che quando ‚Äúsfora‚Äù il 4 ricomincia da zero. Che uno pu√≤ immaginare sia una roba incasinatissima e invece no, perch√© volendo √® concettualmente simila a quello che fai dalla terza elementare quando fai le somme ma alle elementari lo chiamavi ‚Äúriporto‚Äù1. \\(8+4\\) quanto fa? \\(12\\), emb√©?\nS√¨, ma come ci siamo arrivati a far comparire una seconda cifra l√¨? Arriviamoci passo passo: \\(8 + 1 = 9\\).\nOk e fin qua‚Ä¶\n\\(9 + 1\\)? Non ho pi√π numeri a una cifra, allora cosa faccio? Ricomincio dallo zero, aggiungo uno davanti e continuo. Quindi: \\(9 + 1 = 10\\).\n\\(10 + 1 = 11\\).\n\\(11 + 1 = 12\\)\nL‚Äôaddizione modulo \\(n\\) la facciamo dalla seconda elementare senza manco saperlo\nNell‚Äôesempio di sopra il \\(2\\) di \\(12\\) si ottiene in termini di addizione modulo 10 con: \\[8 +_{10} 4 = 12 \\pmod{10} = 2\\]\nOk, andiamo avanti.\nOra, prendiamo un elemento a caso da \\(\\mathbb{Z}_4\\), ad esempio l‚Äôelemento 2. Vogliamo trovare l‚Äôordine dell‚Äôelemento 2. Dobbiamo trovare il pi√π piccolo intero positivo \\(k\\) tale che \\(k \\cdot 2 = 0\\) (ricorda che in notazione additiva, \\(g^k\\) diventa \\(k \\cdot g\\)). Qui, l‚Äôoperazione √® l‚Äôaddizione modulo 4, quindi stiamo cercando il pi√π piccolo \\(k\\) tale che:\n\\(2 +_4 2 +_4 \\ldots +_4 2\\) (\\(k\\) volte) \\(= 0 \\pmod{4}\\)\nIn altre parole, stiamo cercando il pi√π piccolo intero positivo \\(k\\) tale che \\(k \\times 2\\) sia un multiplo di 4. Vediamo un po‚Äô:\n\nPer \\(k = 1\\): \\(1 \\cdot 2 = 2 \\pmod{4} = 2 \\neq 0\\).\nPer \\(k = 2\\): \\(2 \\cdot 2 = 2 +_4 2 = 4 \\pmod{4} = 0\\).\n\nVAMOS! L‚Äôabbiamo trovato! Il pi√π piccolo intero positivo \\(k\\) per cui \\(k \\cdot 2 = 0 \\pmod{4}\\) √® \\(k = 2\\).\nQuindi, l‚Äôordine dell‚Äôelemento 2 nel gruppo \\((\\mathbb{Z}_4, +_4)\\) √® 2.\nProviamo con un altro elemento, ad esempio l‚Äôelemento 1. Vogliamo trovare il pi√π piccolo intero positivo \\(k\\) tale che \\(k \\cdot 1 = 0 \\pmod{4}\\).\n\nPer \\(k = 1\\): \\(1 \\cdot 1 = 1 \\pmod{4} = 1 \\neq 0\\).\nPer \\(k = 2\\): \\(2 \\cdot 1 = 1 +_4 1 = 2 \\pmod{4} = 2 \\neq 0\\).\nPer \\(k = 3\\): \\(3 \\cdot 1 = 1 +_4 1 +_4 1 = 3 \\pmod{4} = 3 \\neq 0\\).\nPer \\(k = 4\\): \\(4 \\cdot 1 = 1 +_4 1 +_4 1 +_4 1 = 4 \\pmod{4} = 0\\).\n\nIl pi√π piccolo intero positivo \\(k\\) per cui \\(k \\cdot 1 = 0 \\pmod{4}\\) √® \\(k = 4\\).\nQuindi, l‚Äôordine dell‚Äôelemento 1 nel gruppo \\((\\mathbb{Z}_4, +_4)\\) √® 4.\nFantastico. Finora era tutto bello e semplice. Ora scendiamo un po‚Äô nell‚Äôabisso."
  },
  {
    "objectID": "blog/group-prime-order.html#gruppi-ciclici-e-generatori-la-chiave-per-i-gruppi-di-ordine-primo",
    "href": "blog/group-prime-order.html#gruppi-ciclici-e-generatori-la-chiave-per-i-gruppi-di-ordine-primo",
    "title": "Gruppi di Ordine Primo",
    "section": "Gruppi Ciclici e Generatori: La Chiave per i Gruppi di Ordine Primo",
    "text": "Gruppi Ciclici e Generatori: La Chiave per i Gruppi di Ordine Primo\nUn tipo speciale di gruppo, che poi √® l‚Äôargomento per cui siamo qui tutti riuniti quest‚Äôoggi, √® il gruppo ciclico.\nUn gruppo ciclico √® (formalmente) un gruppo che pu√≤ essere generato da un singolo elemento. Ovvero, un gruppo \\(G\\) √® ciclico se esiste un elemento \\(g \\in G\\) tale che ogni elemento di \\(G\\) pu√≤ essere espresso come una ‚Äúpotenza‚Äù di \\(g\\) (dove ‚Äúpotenza‚Äù significa ripetere l‚Äôoperazione di gruppo). Questo elemento \\(g\\) √® chiamato generatore del gruppo \\(G\\).\nOra: avete notato una cosa importante? Abbiamo usato il termini ‚Äúpotenza‚Äù ma specificando che vuol dire ‚Äúripere l‚Äôoperazione di gruppo‚Äù. Intendevo questo quando parlavo di Algebra astratta. Non √® altro che prendere l‚Äôalgebra che usiamo tutti i giorni e semplicemente astrarre dei concetti e dimostrare le propriet√† di quell‚Äôoggetto a prescindere che l‚Äôoperazione sia l‚Äôaddizione o la moltiplicazione.\nFormalmente, un gruppo \\(G\\) √® ciclico se esiste un elemento \\(g \\in G\\) tale che:\n\\(G = \\{g^k \\mid k \\in \\mathbb{Z} \\}\\) (in notazione moltiplicativa)\noppure\n\\(G = \\{kg \\mid k \\in \\mathbb{Z} \\}\\) (in notazione additiva)\ndove \\(\\mathbb{Z}\\) rappresenta l‚Äôinsieme dei numeri interi.\nConviene fare un esempio, che sento gi√† la puzza di bruciato. Consideriamo il gruppo degli interi modulo 5 (perch√© se facciamo sempre con quel cazzo di 4 pensate che funziona solo col 4) con l‚Äôaddizione, \\((\\mathbb{Z}_5, +) = \\{[0], [1], [2], [3], [4]\\}\\). Questo √® un gruppo ciclico di ordine 5. L‚Äôelemento [1] √® un generatore di \\(\\mathbb{Z}_5\\), poich√©:\n\n\\([1]^1 = [1]\\)\n\\([1]^2 = [1] + [1] = [2]\\)\n\\([1]^3 = [1] + [1] + [1] = [3]\\)\n\\([1]^4 = [1] + [1] + [1] + [1] = [4]\\)\n\\([1]^5 = [1] + [1] + [1] + [1] + [1] = [5] \\equiv [0] \\pmod{5}\\) (elemento neutro)\n\\([1]^6 = [1] + [1] + [1] + [1] + [1] + [1] = [6] \\equiv [1] \\pmod{5}\\), e cos√¨ via.\n\nQuindi, tornando a \\(\\mathbb{Z}_5 = \\{[0], [1], [2], [3], [4]\\}\\), √® chiaro che partendo da [1] e sommandolo a se stesso un po‚Äô di volte, possiamo ottenere tutti gli altri elementi. Infatti: [1], [1]+[1]=[2], [1]+[1]+[1]=[3], [1]+[1]+[1]+[1]=[4], e [1] sommato 5 volte ci rid√† [0] (cio√® [5] che modulo 5 fa [0]). Figo no? Questo significa che [1] √® un generatore di \\(\\mathbb{Z}_5\\).\nMa non solo [1]! Anche [2] √® un generatore di \\(\\mathbb{Z}_5\\). Proviamo: [2], [2]+[2]=[4], [2]+[2]+[2]=[6]=[1] (modulo 5), [2]+[2]+[2]+[2]=[8]=[3] (modulo 5), e [2] sommato 5 volte fa [10]=[0] (modulo 5). Anche con [2] abbiamo generato tutti gli elementi di \\(\\mathbb{Z}_5\\)!\nOra, uno potrebbe chiedersi: ma vale sempre? √à vero che [2] √® un generatore di \\(\\mathbb{Z}_n\\) per ogni \\(n\\) dispari? Si lascia la dimostrazione come esercizio al lettore.\nNaaah! Scherzo. In realt√† lo schema della dimostrazione potrebbe essere abbastanza intuitivo.\nL‚Äôidea √® che se \\(n\\) √® dispari, allora 2 e \\(n\\) sono coprimi, cio√® non hanno fattori comuni (a parte 1, ovviamente). E questo √® un dettaglio FONDAMENTALE.\nCerchiamo di capirlo meglio. Quando sommiamo [2] a se stesso un po‚Äô di volte in \\(\\mathbb{Z}_n\\), otteniamo i multipli di [2]: [2], [4], [6], [8], [10], e cos√¨ via, sempre modulo \\(n\\). Se 2 e \\(n\\) fossero ‚Äúamici‚Äù e avessero un fattore comune, diciamo \\(d &gt; 1\\), allora i multipli di 2 ‚Äúmodulo \\(n\\)‚Äù si ripeterebbero prima di coprire tutti gli elementi di \\(\\mathbb{Z}_n\\). Ma se 2 e \\(n\\) sono coprimi, allora i multipli di 2 ‚Äúmodulo \\(n\\)‚Äù continuano a sforare e a dare resti diversi fino a quando non abbiamo generato tutti gli elementi da [0] a \\([n-1]\\).\nPer esempio, prendiamo \\(n=9\\) (dispari). Partiamo da [2]: [2], [4], [6], [8], [10]=[1] (modulo 9), [12]=[3] (modulo 9), [14]=[5] (modulo 9), [16]=[7] (modulo 9), [18]=[0] (modulo 9). E voil√†! Abbiamo ottenuto [0], [1], [2], [3], [4], [5], [6], [7], [8], cio√® tutti gli elementi di \\(\\mathbb{Z}_9\\).\nSe invece prendessimo un \\(n\\) pari, tipo \\(n=6\\), e provassimo con [2] in \\(\\mathbb{Z}_6\\): [2], [4], [6]=[0] (modulo 6), [8]=[2] (modulo 6)‚Ä¶ Vediamo che otteniamo solo [0], [2], [4]. Non generiamo tutto \\(\\mathbb{Z}_6\\). Questo succede perch√© 2 e 6 non sono coprimi (hanno il fattore comune 2).\n\\[\\blacksquare\\]"
  },
  {
    "objectID": "blog/group-prime-order.html#gruppi-di-ordine-primo-un-risultato-fondamentale",
    "href": "blog/group-prime-order.html#gruppi-di-ordine-primo-un-risultato-fondamentale",
    "title": "Gruppi di Ordine Primo",
    "section": "Gruppi di Ordine Primo: Un Risultato Fondamentale",
    "text": "Gruppi di Ordine Primo: Un Risultato Fondamentale\nOra arriviamo al cuore del nostro articolo: i gruppi di ordine primo. Tutti sapete cos‚Äô√® un numero primo, altrimenti vi vengo a cercare e a strappare la licenza media di persona.\nComunque.\nFormalmente (perch√© un po‚Äô di formalit√† ci vuole, senn√≤ sembra il bar dello sport): Un numero primo √® un intero positivo maggiore di 1 che ha solo due divisori positivi: 1 e se stesso. Esempi di numeri primi sono 2, 3, 5, 7, 11, 13, ecc.\nUn risultato fondamentale e notevole in teoria dei gruppi afferma (e rieccoci alla questione algebra astratta!):\nTeorema: Ogni gruppo di ordine primo √® ciclico.\nCazzo vuol dire? (Cit.)\nQuesto teorema ci dice che se prendiamo un gruppo \\(G\\) il cui ordine \\(|G|\\) √® un numero primo \\(q\\), allora \\(G\\) √® necessariamente un gruppo ciclico. Questo significa che esiste almeno un elemento \\(g \\in G\\) che genera tutto il gruppo \\(G\\).\nIl che √® notevole. Vuol dire che possiamo prendere un gruppo \\(G\\) di pordine \\(q\\) (ricordate? prima per esempio avevamo ordine \\(4\\) oppure \\(5\\)) e possiamo avere un elemento all‚Äôinterno del gruppo che genera tutti gli altri, dato un numero \\(k\\).\n\nNon riesco a capire perch√© sei cos√¨ eccitato Luca. Spiegamelo, prima che ti faccio male\n\nCalma e sangue freddo.\nRiprendiamo l‚Äôesempio di \\(\\mathbb{Z}_5\\) e del generatore [1]. Se io vi dico che un certo elemento nel gruppo √® [3], e vi dico che il generatore √® [1], voi sapete subito che per ottenere [3] da [1] devo fare:\n\\[\n[1] + [1] + [1] = [3] \\qquad \\text{oppure} \\qquad 3 \\cdot [1] = [3]\n\\]\nMa potrei averlo ottenuto anche facendo molte pi√π operazioni, tipo:\n\\[\n8 \\cdot [1] = [1] + [1] + [1] + [1] + [1] + [1] + [1] + [1] = [8] = [3] \\pmod{5}\n\\]\no anche\n\\[\n90901291213 \\cdot [1] = [90901291213] = [3] \\pmod{5}\n\\]\nCi sono infiniti modi per descrivere lo stesso elemento [3] usando il generatore [1]! Se io vi dico solo che il risultato √® [3], che l‚Äôordine del gruppo ciclico √® 5 e il generatore √® [1], voi non potete sapere quante volte ho applicato l‚Äôoperazione, cio√® quale esponente \\(k\\) ho usato tra gli infiniti possibili. Ed √® proprio su questa ‚Äúignoranza‚Äù che si basa una valanga di algoritmi di crittografia moderni!\n‚ÄúCose semplici da verificare, ma difficili da calcolare‚Äù: Verificare che \\(90901291213 \\cdot [1] = [3] \\pmod{5}\\) √® facilissimo. Basta fare la divisione e vedere il resto. Ma se io vi dessi solo [3], [1] e 5, e vi chiedessi di trovare quel numero enorme \\(k=90901291213\\) (o uno simile), sarebbe praticamente impossibile farlo in tempi ragionevoli, soprattutto se l‚Äôordine del gruppo fosse un numero primo enorme di centinaia di cifre!\nEcco perch√© questo teorema sui gruppi di ordine primo, che all‚Äôinizio sembrava solo un giochino matematico, √® in realt√† fondamentale per la sicurezza delle nostre comunicazioni online, delle nostre transazioni bancarie, e di un sacco di altre cose che usiamo tutti i giorni. La matematica astratta che salva il mondo, ragazzi! Chi l‚Äôavrebbe mai detto? Come? Banalmente, l‚Äôidea √® che se io uso un numero segreto \\(k\\) per ‚Äúcriptare‚Äù in un certo modo con un certo algoritmo, anche se vi mostro il risultato ‚Äúcriptato‚Äù, indovinare \\(k\\) sarebbe un disastro.\nDetto questo: ora dimostrazione formale del teorema e tutti a nanna.\nDimostrazione (Schema):\nSia \\(G\\) un gruppo di ordine primo \\(q\\). Consideriamo un elemento \\(g \\in G\\) diverso dall‚Äôelemento neutro \\(e\\). Consideriamo il sottogruppo ciclico generato da \\(g\\), che indichiamo con \\(\\langle g \\rangle = \\{g^k \\mid k \\in \\mathbb{Z} \\}\\). Per il teorema di Lagrange, l‚Äôordine di un sottogruppo deve dividere l‚Äôordine del gruppo. Quindi, l‚Äôordine di \\(\\langle g \\rangle\\), cio√® \\(|\\langle g \\rangle|\\), deve dividere l‚Äôordine di \\(G\\), che √® \\(q\\). Poich√© \\(q\\) √® primo, i divisori positivi di \\(q\\) sono solo 1 e \\(q\\).\nL‚Äôordine di \\(\\langle g \\rangle\\) non pu√≤ essere 1, perch√© \\(g \\neq e\\), quindi \\(\\langle g \\rangle\\) contiene almeno due elementi (\\(e\\) e \\(g\\)). Pertanto, l‚Äôunica possibilit√† √® che \\(|\\langle g \\rangle| = q\\). Ma se l‚Äôordine del sottogruppo generato da \\(g\\) √® uguale all‚Äôordine del gruppo \\(G\\), e \\(\\langle g \\rangle\\) √® un sottogruppo di \\(G\\), allora deve essere che \\(\\langle g \\rangle = G\\). Questo significa che \\(G\\) √® generato dall‚Äôelemento \\(g\\), e quindi \\(G\\) √® ciclico.\nAltre Conseguenze e Implicazioni:\nQuesto teorema ha importanti conseguenze. Se sappiamo che un gruppo ha ordine primo \\(q\\), sappiamo immediatamente che:\n\n√à ciclico: Esiste un generatore \\(g \\in G\\) tale che ogni elemento di \\(G\\) √® una potenza di \\(g\\).\n√à abeliano: Tutti i gruppi ciclici sono abeliani. Quindi, ogni gruppo di ordine primo √® abeliano.\nStruttura semplice: I gruppi ciclici sono tra i gruppi pi√π semplici da comprendere e studiare. Il teorema ci dice che i gruppi di ordine primo, nonostante la loro apparente ‚Äúrarit√†‚Äù (ci sono infiniti numeri primi), hanno una struttura algebrica molto ben definita e semplice.\n\nGeneratore \\(g\\):\nAbbiamo visto che un gruppo \\(G\\) di ordine primo \\(q\\) √® ciclico e ha un generatore \\(g\\). Questo generatore \\(g\\) √® un elemento di \\(G\\) tale che ‚Äúripetendo‚Äù l‚Äôoperazione di gruppo con \\(g\\) (con se stesso), possiamo ottenere tutti gli elementi di \\(G\\).\nAd esempio, se \\(G\\) √® un gruppo di ordine 7 (7 √® primo), allora esiste un elemento \\(g \\in G\\) tale che:\n\\(G = \\{e, g, g^2, g^3, g^4, g^5, g^6\\}\\)\ndove \\(e\\) √® l‚Äôelemento neutro e \\(g^7 = e\\). Gli esponenti sono presi modulo 7.\nUnicit√† (a meno di isomorfismo):\nUn altro risultato importante (che non dimostreremo qui perch√© oggettivamente mi sono scassato le balle pure io) √® che esiste, a meno di isomorfismo, un solo gruppo ciclico di ordine \\(n\\) per ogni intero positivo \\(n\\). In particolare, per ogni numero primo \\(q\\), esiste un solo gruppo di ordine \\(q\\), a meno di isomorfismo. Questo gruppo √® isomorfo al gruppo ciclico \\(\\mathbb{Z}_q = (\\mathbb{Z}/q\\mathbb{Z}, +)\\), cio√® gli interi modulo \\(q\\) con l‚Äôaddizione.\nEsempio:\nSe consideriamo un gruppo \\(G\\) di ordine 3. Poich√© 3 √® un numero primo, sappiamo che \\(G\\) √® ciclico e abeliano. Esiste un elemento \\(g \\in G\\) tale che \\(G = \\{e, g, g^2\\}\\) e \\(g^3 = e\\). La struttura di \\(G\\) √® completamente determinata da questa propriet√†. Ogni gruppo di ordine 3 √® ‚Äúessenzialmente lo stesso‚Äù (isomorfo) a \\(\\mathbb{Z}_3 = \\{[0], [1], [2]\\}\\) con l‚Äôaddizione modulo 3."
  },
  {
    "objectID": "blog/group-prime-order.html#conclusione-la-bellezza-e-la-potenza-dei-gruppi-di-ordine-primo",
    "href": "blog/group-prime-order.html#conclusione-la-bellezza-e-la-potenza-dei-gruppi-di-ordine-primo",
    "title": "Gruppi di Ordine Primo",
    "section": "Conclusione: La Bellezza e la Potenza dei Gruppi di Ordine Primo**",
    "text": "Conclusione: La Bellezza e la Potenza dei Gruppi di Ordine Primo**\nE con questo, siamo arrivati alla fine di questo viaggione nell‚Äôabisso dell‚Äôalgebra astratta. Spero che abbiate capito perch√© questo teorema, all‚Äôapparenza cos√¨ semplice, √® in realt√† un risultato fondamentale e potente. Ci dice che i gruppi con un numero primo di elementi non sono solo un‚Äôastrazione matematica, ma hanno una struttura incredibilmente ordinata e prevedibile: sono ciclici, sono abeliani, e sono, in un certo senso, i gruppi pi√π ‚Äúsemplici‚Äù che possiamo immaginare.\nMa non √® tanto la loro semplicit√† che deve entusiasmare. Come abbiamo visto, proprio questa struttura ‚Äúsemplice‚Äù e ben definita dei gruppi ciclici di ordine primo √® alla base di tecnologie complesse come la crittografia moderna. La prossima volta che fate un pagamento online su onlyfans o che inviate un messaggio criptato che tanto la vostra fidanzata scoprir√† comunque, pensateci: dietro le quinte, c‚Äô√® l‚Äôalgebra astratta, ci sono i gruppi di ordine primo, e c‚Äô√® un sacco di matematica fighissima al servizio della vostra sicureza.\nLa teoria dei gruppi √® piena di altri risultati sorprendenti e connessioni inaspettate. Questo teorema sui gruppi di ordine primo √® solo un piccolo assaggio della bellezza e della potenza di questa branca della matematica. Se siete arrivati fin qui, complimenti, sinceramente!\n\nFIN"
  },
  {
    "objectID": "blog/group-prime-order.html#footnotes",
    "href": "blog/group-prime-order.html#footnotes",
    "title": "Gruppi di Ordine Primo",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nin realt√† l‚Äôanalogia √® un po‚Äô azzardata e pericolante, visto che nelle operazioni modulo \\(n\\) si resta sempre all‚Äôinterno dell‚Äôinsieme iniziale. Il ‚Äúriporto‚Äù nelle somme in base 10 √® legato alle potenze di 10 (unit√†, decine, centinaia, ecc.), mentre l‚Äôaddizione modulo 4 √® legata ai resti della divisione per 4. Non sono esattamente la stessa cosa, anche se condividono un‚Äôidea di ‚Äúsuperamento di una soglia‚Äù e di ‚Äúripartenza‚Äù.‚Ü©Ô∏é"
  },
  {
    "objectID": "blog/blockchain.html",
    "href": "blog/blockchain.html",
    "title": "Blockchain: Non Solo Criptovalute",
    "section": "",
    "text": "Se non hai sentito parlare di Bitcoin e altre criptovalute vuol dire che fino ad oggi hai vissuto in una caverna, perch√© i media ormai hanno scartavetrato con questo argomento. Ecco, le criptovalute, spesso, si nascondono dietro a una tecnologia chiamata blockchain. Ma che cavolo √® veramente una blockchain? E serve solo alle valute virtuali? In questo articolo voglio addentrarmi un po‚Äô alla materia, scoprendo anche i suoi lati pi√π oscuri e magari meno noti in modo (spero) semplice e chiaro, senza bisogno di essere esperti di informatica o finanza.\n\n\nFirst things first‚Ä¶\nImmaginiamo di avere un registro pubblico, come un grande quaderno condiviso tra tantissime persone. Per esempio uno di questi registri potrebbe essere il vostro conto in banca, o il registro del catasto, o il registro delle nascite di un comune o il vostro personalissimo e dettagliatissimo resoconto delle maleducate che incontrate nei vostri felicissimi sabati sera.\nNormalmente, un registro √® gestito da una sola entit√†, una banca, un governo, voi, ecc. La blockchain invece √® diversa: √® un registro distribuito.\n\nEcco che comincia: che cazzo vuol dire distribuito??\n\nCalma.\nSignifica che questo ‚Äúquaderno‚Äù non √® in un unico posto (la banca, il comune, un server ecc.), ma √® copiato e tenuto aggiornato contemporaneamente da migliaia o milioni di computer in tutto il mondo.\n\nEh vabb√® capirai, non √® gi√† cos√¨? Eh? Facebook non ha milioni di computer? EHH??\n\nNon √® la stessa cosa. Nel caso di aziende come google, facebook ecc il fatto di avere una copia distribuita dei dati su tanti server fa comunque sempre capo ad un‚Äôunica autorit√† che √® appunto la multinazionale. In questo caso parliamo di persone comuni: io, te, la maleducata di venerd√¨ scorso.\n\nScusa, COSA? Tu vorresti distribuire i conti correnti della gente sui computer di tutta la gente? Ma sei rincoglionito?\n\nNo.¬†Calmati. Ci arriviamo.\nIntanto‚Ä¶ un altro po‚Äô di nomenclatura.\nOgni ‚Äúpagina‚Äù di questo quaderno √® chiamata blocco. In ogni blocco vengono scritte delle transazioni, ovvero delle informazioni. Una volta che una pagina (un blocco) √® piena, viene sigillata in modo speciale, usando una specie di ‚Äúimpronta digitale‚Äù matematica. Questa impronta digitale √® collegata alla pagina precedente, formando una catena (in inglese ‚Äúchain‚Äù) di blocchi: ecco perch√© si chiama blockchain, ‚Äúcatena di blocchi‚Äù.\n\nS√¨ ma perch√©?\n\nEh perch√©‚Ä¶ Perch√© se √® su tutti i server del mondo, di gente comune, bisogna trovare una maniera per far s√¨ che sia impossibile alterarla. Se qualche malintenzionato avesse il documento sul proprio computer e lo alterasse, comunicando agli altri la modifica potrebbe rubare i soldi della gente per esempio, o appropriarsi della casa di qualcuno. Ma se la pagina √® firmata allora √® impossibile farlo, perch√© nessuno riconoscerebbe la nuova firma (la firma non pu√≤ essere alterata da un solo partecipante, visto che viene generata da tutti).\nRiassunto intermedio:\nDunque, ricapitolandolo:\n\nDistribuita: Non controllata da uno solo, ma da tanti, tutti.\nTrasparente (ma non sempre, ci arriviamo): Tutti i partecipanti (o chi ha accesso alla blockchain, che pu√≤ essere pubblica o privata) possono vedere le ‚Äúpagine‚Äù (i blocchi) e le transazioni.\nImmutabile: Una volta scritta una ‚Äúpagina‚Äù (blocco) e sigillata, √® quasi impossibile modificarla o cancellarla. Questo √® dovuto all‚Äôuso dell‚Äô‚Äúimpronta digitale‚Äù e alla catena di blocchi. Dico quasi impossibile, perch√© se uno ha una botta di fortuna terrificante potrebbe alterare una pagina. Ma con botta di fortuna, intendo che √® pi√π probabile che Salvini diventi comunista.\n\nFacciamo un esempio pratico, che altrimenti vi perdete‚Ä¶\nPensiamo ad un gruppo di amici che vogliono tenere traccia di chi presta soldi a chi. Invece di usare foglietti volanti che si possono perdere o modificare di nascosto, decidono di usare un quaderno pubblico.\n\nQuaderno Pubblico: Mettono un quaderno al centro del tavolo, a disposizione di tutti.\nNuova Transazione (Blocco): Se Mariangela presta 10 euro a Gianfranco, tutti gli amici vedono Mariangela scrivere nel quaderno: ‚ÄúBlocco 1: Mariangela presta 10‚Ç¨ a Gianfranco‚Äù. Questo √® il primo ‚Äúblocco‚Äù.\nBlocco Successivo: Poi, se Gianfranco restituisce 5 euro a Mariangela, scrivono un nuovo ‚Äúblocco‚Äù sotto il precedente: ‚ÄúBlocco 2: Gianfranco restituisce 5‚Ç¨ a Mariangela‚Äù.\nCatena e Impronta Digitale (Semplificata): Immagina che ogni volta che scrivono un blocco, oltre al contenuto della transazione, scrivono anche un breve riassunto del blocco precedente (l‚Äôimpronta digitale semplificata). Cos√¨, il Blocco 2 riassumerebbe il Blocco 1. Se qualcuno volesse modificare il Blocco 1 dopo, dovrebbe cambiare anche il riassunto nel Blocco 2, e poi in tutti i blocchi successivi. Diventa complicatissimo e evidente che c‚Äô√® stato un tentativo di manipolazione.\n\nIn una blockchain vera, questo ‚Äúriassunto‚Äù (l‚Äô‚Äúimpronta digitale‚Äù, tecnicamente chiamata hash) √® molto complesso e generato da calcoli matematici avanzati, rendendo le modifiche praticamente impossibili senza essere scoperti.\nL‚Äôosservatore pi√π attento (nessuno‚Ä¶) avr√† notato una cosa particolare &gt; Ma Luca, perch√© cazzo dici ‚Äúpraticamente impossibile‚Äù? Vuol dire che √® possibile?\nS√¨. Come detto prima la probabilit√† di riuscirci √® talmente bassa che si pu√≤ dormire sonni molto tranquilli. Nel senso che: √® pi√π probabile avere un incidente d‚Äôauto, ma vedo che la gente non si barrica in casa per questo motivo.\n\n\n\nOk, le criptovalute come Bitcoin usano la blockchain. Ma la blockchain √® solo criptovaluta o c‚Äô√® altro? Beh che domanda del cavolo‚Ä¶ √® scritto nel titolo Luca.\nUn paio di esempi pratici e concreti:\n\nTracciamento della Filiera Alimentare e Prodotti: Immagina di comprare una bottiglia d‚Äôolio d‚Äôoliva. Grazie alla blockchain, potresti scansionare un codice sulla bottiglia e vedere tutta la storia di quell‚Äôolio: da quale uliveto provengono le olive, in quale frantoio sono state lavorate, quando √® stata imbottigliata, quando √® arrivata al supermercato. Questo rende la filiera pi√π trasparente e aiuta a combattere frodi e prodotti contraffatti. Funziona per il cibo, ma anche per vestiti, medicine, pezzi di ricambio per auto‚Ä¶ qualsiasi cosa compriate per soddisfare i vostri desideri animali. Putridi bestie.\nGestione dell‚ÄôIdentit√† Digitale: Oggi abbiamo tantissime password e identit√† digitali sparse ovunque (social media, banche, siti web‚Ä¶). La blockchain potrebbe permettere di creare un‚Äôunica identit√† digitale sicura e controllata da noi stessi. Invece di dare i nostri dati a ogni sito, potremmo usare la nostra ‚Äúidentit√† blockchain‚Äù per autenticarci, scegliendo quali informazioni condividere e con chi.\nContratti Intelligenti (Smart Contracts): Sono programmi che si attivano automaticamente quando si verificano certe condizioni. Immagina per esempio che l‚Äôolivaio di prima si accorda con il frantumaio. Gli dice: ‚Äúascolta capo, quando mi arrivano i prossimi 3 quintali di olive te li mando per 200 euro, fatta?‚Äù E il frantumaio che sa che l‚Äôolivaio √® un gran raccontaballe gli dice ‚Äúeh no capo‚Ä¶ che l‚Äôultima volta non mi hai mandato un bel niente‚Äù. Allora stipulano uno smart contract che si attiva in automatico, non appena arrivano le olive vengono consegnate. Nello smart contract potrebbe per esempio essere inclusa una penalit√† per cui se l‚Äôolivaio si rifiuta di consegnare le olive paga in automatico una multa. Non una multa che dice ‚Äús√¨ vabb√® sticazzi hai capito tutto, non pago niente‚Äù bens√¨ una multa che viene prelevata in automatico dal conto del signor olivaio.\n\nQuesti sono solo alcuni esempi. Le applicazioni della blockchain sono potenzialmente infinite e ne vengono fuori ogni giorno come i funghi.\n\n\n\nCome ogni tecnologia potente, ahim√©, anche la blockchain ha i suoi lati negativi e presenta delle sfide. √à importante conoscerli per avere un quadro completo e non farsi abbagliare solo dai vantaggi.\n\nDecentralizzazione e Attivit√† Illegali: Uno dei punti di forza della blockchain, la decentralizzazione, pu√≤ anche essere un punto debole. Se non c‚Äô√® un‚Äôautorit√† centrale di controllo, diventa pi√π difficile intervenire contro attivit√† illegali. Per esempio:\n\nCrimine Organizzato: Organizzazioni criminali potrebbero usare blockchain e criptovalute per riciclare denaro sporco, finanziare attivit√† illegali, o condurre transazioni non tracciabili. Nessuno saprebbe mai chi ha fatto che cosa.\nEvasione Fiscale: √à pi√π complicato per le autorit√† fiscali monitorare transazioni che avvengono al di fuori dei sistemi bancari tradizionali. Ma se l‚Äôintero sistema fosse gestito da blockchain sarebbe impossibile evadere le tasse visto che ogni transazione sarebbe tracciata e avrebbe delle fee.\nMercati Neri Online: Le blockchain possono facilitare la creazione di mercati online per beni e servizi illegali, come droghe o armi, rendendo pi√π difficile per le forze dell‚Äôordine smantellarli.\n\nOVVIAMENTE: Questo non significa che la blockchain √® fatta per il crimine. Significa che, come qualsiasi strumento, pu√≤ essere usata per scopi positivi e negativi. √à come internet: √® una risorsa fantastica se vi mandate le foto di gattini e i reel della gente che fa incidenti stradali. Ma pu√≤ essere fonte di disinformazione oltre che dei reel di Salvini che mangia le ciliegie (oggi ce l‚Äôho con Salvini perdonatemi).\nMancanza di Regolamentazione: Essendo una tecnologia decentralizzata, la blockchain e le criptovalute non sono regolate. Questo pu√≤ creare problemi:\n\nProtezione dei Consumatori: Se investi in criptovalute e perdi tutto, spesso non c‚Äô√® un‚Äôautorit√† a cui puoi rivolgerti per essere risarcito. Mancano le tutele che esistono nel sistema finanziario tradizionale.\nInstabilit√† e Speculazione: Il valore delle criptovalute √® estremamente volatile, con forti oscillazioni di prezzo. Questo le rende rischiose per gli investimenti e pu√≤ creare bolle speculative.\n\nScalabilit√† e Consumo Energetico: Alcune blockchain, come quella di Bitcoin, hanno problemi di scalabilit√†. Significa che possono gestire un numero limitato di transazioni al secondo. Se troppe persone vogliono usare la blockchain nello stesso momento, le transazioni possono diventare lente e costose. Inoltre, alcune blockchain (come ancora Bitcoin, anche se ci sono alternative pi√π efficienti) consumano molta energia elettrica per funzionare, il che ha un impatto ambientale negativo. Ovviamente questo non vale per tutte le blockchain: sono nati nel tempo metodi decisamente pi√π economici e meno dispendiosi in termini di energia consumata che risolvono parzialmente o totalmente questi problemi.\nRischi per la Sicurezza: Anche se la blockchain √® progettata per essere sicura, non √® immune da attacchi.\n\nAttacchi ‚Äú51%‚Äù: In alcune blockchain, se un singolo soggetto riuscisse a controllare pi√π del 50% della potenza di calcolo della rete, potrebbe teoricamente manipolare le transazioni. Anche se molto difficile, questo tipo di attacco √® un rischio teorico che deve sempre e comunque essere preso in considerazione. Ad esempio una soluzione √® garantirsi di avere il controllo sul 51% fitantoch√© la diffusione della blockchain √® alta a sufficienza da mitigare i rischi.\nSicurezza dei ‚ÄúPortafogli‚Äù Digitali (Wallet): Per usare criptovalute e interagire con la blockchain, si usano dei ‚Äúportafogli‚Äù digitali. Se questi portafogli non sono protetti adeguatamente (es. password deboli, phishing), si rischia di perdere i propri fondi. O anche (ed √® capitato‚Ä¶ ) non essendoci un‚Äôautorit√† centrale a cui fare riferimento se perdete la vostra ‚Äúpassword‚Äù siete fotttuti. Se vi dimenticate la password dell‚Äôaccount facebook dove chattate cone le escort, chiedete a facebook il reset della password e facebook gestisce tutto. Nel mondo blockchain se perdete la vostra chiave privata (\\(\\approx\\) password), basta, that‚Äôs it, siete tagliati fuori dal vostro portafoglio. Anche per questo punto ci sono soluzioni come i portafogli gestiti da autorit√† centrali. Il che per√≤ fa perdere un po‚Äô di senso alla blokchain.\n\n\n\n\n\nLa blockchain √® una tecnologia potenzialmente rivoluzionaria. Non √® assolutamente sinonimo di ‚Äúcriptovalute‚Äù e potrebbe trasformare molti settori attualmente gestiti in maniera tradizionale, dalla finanza alla logistica, dalla sanit√† alla pubblica amministrazione. Offre vantaggi importanti come la trasparenza, la sicurezza, la decentralizzazione e l‚Äôimmutabilit√† dei dati.\nPer√≤, √® fondamentale essere consapevoli anche dei rischi che comporta. La decentralizzazione, che √® un punto di forza, pu√≤ anche essere usata per attivit√† illegali. La mancanza di regolamentazione e la complessit√† tecnica sono ostacoli da superare. Come per ogni innovazione, √® importante un approccio equilibrato: sfruttare le potenzialit√† della blockchain, affrontando i rischi con consapevolezza e lavorando per creare un futuro digitale pi√π sicuro e trasparente per tutti.\nLa blockchain √® ancora in fase di sviluppo. Il futuro dipender√† da come sapremo guidare questa tecnologia e farla evolvere in modo responsabile e sostenibile, massimizzando i benefici e minimizzando i rischi.\n\n\n\nUn‚Äôultima riflessione. Avrai notato che io, Luca Simonetti, sono l‚Äôautore di questo articolo. L‚Äôho scritto, l‚Äôho pubblicato (ipoteticamente, eh!). Ora, immagina che tra un‚Äôora io veda la foto della tipa mezza gnuda su instagram, o che cambi idea su qualcosa che ho scritto, o che semplicemente trovi un errore di battitura che mi infastidisce. Posso tranquillamente tornare qui e modificare il cazzo che voglio. Posso cambiare intere frasi, aggiungere o togliere paragrafi, stravolgere il senso di quello che ho detto. E nessuno potrebbe contestare pi√π di tanto la cosa, perch√© l‚Äôautorit√† che gestisce questo contenuto (io, in questo caso) ho il pieno controllo e posso cambiarlo a mio piacimento.\nChi ha letto questo articolo ora, e magari lo rilegge tra qualche ora, potrebbe trovarlo diverso. Non c‚Äô√® un modo per dimostrare quale fosse la versione originale, se non affidandosi alla mia parola (o a servizi esterni che archiviano pagine web, ma che sono comunque ‚Äúesterni‚Äù e non parte integrante dell‚Äôarticolo stesso).\nEcco, questa √® la grande differenza con un‚Äôinformazione registrata su una blockchain. Una volta che un blocco di informazioni viene scritto e ‚Äúsigillato‚Äù sulla catena, non pu√≤ essere modificato retroattivamente in modo furtivo. Ogni modifica lascerebbe una traccia evidente e la versione originale resterebbe sempre verificabile e consultabile da chiunque. Questo articolo, invece, √® soggetto al capriccio del suo autore (ovvero il mio!) e alla natura effimera del web tradizionale. Un piccolo esempio concreto per capire ancora meglio la potenza (e la differenza!) della blockchain.\nSpoiler: questo ultimo paragrafo l‚Äôho aggiunto dopo aver pubblicato la versione originale dell‚Äôarticolo. E se nesusno l‚Äôavesse letto prima e se io non avessi scritto questa roba qui, nessuno l‚Äôavrebbe mai saputo."
  },
  {
    "objectID": "blog/blockchain.html#che-cos√®-in-parole-semplici-una-blockchain",
    "href": "blog/blockchain.html#che-cos√®-in-parole-semplici-una-blockchain",
    "title": "Blockchain: Non Solo Criptovalute",
    "section": "",
    "text": "First things first‚Ä¶\nImmaginiamo di avere un registro pubblico, come un grande quaderno condiviso tra tantissime persone. Per esempio uno di questi registri potrebbe essere il vostro conto in banca, o il registro del catasto, o il registro delle nascite di un comune o il vostro personalissimo e dettagliatissimo resoconto delle maleducate che incontrate nei vostri felicissimi sabati sera.\nNormalmente, un registro √® gestito da una sola entit√†, una banca, un governo, voi, ecc. La blockchain invece √® diversa: √® un registro distribuito.\n\nEcco che comincia: che cazzo vuol dire distribuito??\n\nCalma.\nSignifica che questo ‚Äúquaderno‚Äù non √® in un unico posto (la banca, il comune, un server ecc.), ma √® copiato e tenuto aggiornato contemporaneamente da migliaia o milioni di computer in tutto il mondo.\n\nEh vabb√® capirai, non √® gi√† cos√¨? Eh? Facebook non ha milioni di computer? EHH??\n\nNon √® la stessa cosa. Nel caso di aziende come google, facebook ecc il fatto di avere una copia distribuita dei dati su tanti server fa comunque sempre capo ad un‚Äôunica autorit√† che √® appunto la multinazionale. In questo caso parliamo di persone comuni: io, te, la maleducata di venerd√¨ scorso.\n\nScusa, COSA? Tu vorresti distribuire i conti correnti della gente sui computer di tutta la gente? Ma sei rincoglionito?\n\nNo.¬†Calmati. Ci arriviamo.\nIntanto‚Ä¶ un altro po‚Äô di nomenclatura.\nOgni ‚Äúpagina‚Äù di questo quaderno √® chiamata blocco. In ogni blocco vengono scritte delle transazioni, ovvero delle informazioni. Una volta che una pagina (un blocco) √® piena, viene sigillata in modo speciale, usando una specie di ‚Äúimpronta digitale‚Äù matematica. Questa impronta digitale √® collegata alla pagina precedente, formando una catena (in inglese ‚Äúchain‚Äù) di blocchi: ecco perch√© si chiama blockchain, ‚Äúcatena di blocchi‚Äù.\n\nS√¨ ma perch√©?\n\nEh perch√©‚Ä¶ Perch√© se √® su tutti i server del mondo, di gente comune, bisogna trovare una maniera per far s√¨ che sia impossibile alterarla. Se qualche malintenzionato avesse il documento sul proprio computer e lo alterasse, comunicando agli altri la modifica potrebbe rubare i soldi della gente per esempio, o appropriarsi della casa di qualcuno. Ma se la pagina √® firmata allora √® impossibile farlo, perch√© nessuno riconoscerebbe la nuova firma (la firma non pu√≤ essere alterata da un solo partecipante, visto che viene generata da tutti).\nRiassunto intermedio:\nDunque, ricapitolandolo:\n\nDistribuita: Non controllata da uno solo, ma da tanti, tutti.\nTrasparente (ma non sempre, ci arriviamo): Tutti i partecipanti (o chi ha accesso alla blockchain, che pu√≤ essere pubblica o privata) possono vedere le ‚Äúpagine‚Äù (i blocchi) e le transazioni.\nImmutabile: Una volta scritta una ‚Äúpagina‚Äù (blocco) e sigillata, √® quasi impossibile modificarla o cancellarla. Questo √® dovuto all‚Äôuso dell‚Äô‚Äúimpronta digitale‚Äù e alla catena di blocchi. Dico quasi impossibile, perch√© se uno ha una botta di fortuna terrificante potrebbe alterare una pagina. Ma con botta di fortuna, intendo che √® pi√π probabile che Salvini diventi comunista.\n\nFacciamo un esempio pratico, che altrimenti vi perdete‚Ä¶\nPensiamo ad un gruppo di amici che vogliono tenere traccia di chi presta soldi a chi. Invece di usare foglietti volanti che si possono perdere o modificare di nascosto, decidono di usare un quaderno pubblico.\n\nQuaderno Pubblico: Mettono un quaderno al centro del tavolo, a disposizione di tutti.\nNuova Transazione (Blocco): Se Mariangela presta 10 euro a Gianfranco, tutti gli amici vedono Mariangela scrivere nel quaderno: ‚ÄúBlocco 1: Mariangela presta 10‚Ç¨ a Gianfranco‚Äù. Questo √® il primo ‚Äúblocco‚Äù.\nBlocco Successivo: Poi, se Gianfranco restituisce 5 euro a Mariangela, scrivono un nuovo ‚Äúblocco‚Äù sotto il precedente: ‚ÄúBlocco 2: Gianfranco restituisce 5‚Ç¨ a Mariangela‚Äù.\nCatena e Impronta Digitale (Semplificata): Immagina che ogni volta che scrivono un blocco, oltre al contenuto della transazione, scrivono anche un breve riassunto del blocco precedente (l‚Äôimpronta digitale semplificata). Cos√¨, il Blocco 2 riassumerebbe il Blocco 1. Se qualcuno volesse modificare il Blocco 1 dopo, dovrebbe cambiare anche il riassunto nel Blocco 2, e poi in tutti i blocchi successivi. Diventa complicatissimo e evidente che c‚Äô√® stato un tentativo di manipolazione.\n\nIn una blockchain vera, questo ‚Äúriassunto‚Äù (l‚Äô‚Äúimpronta digitale‚Äù, tecnicamente chiamata hash) √® molto complesso e generato da calcoli matematici avanzati, rendendo le modifiche praticamente impossibili senza essere scoperti.\nL‚Äôosservatore pi√π attento (nessuno‚Ä¶) avr√† notato una cosa particolare &gt; Ma Luca, perch√© cazzo dici ‚Äúpraticamente impossibile‚Äù? Vuol dire che √® possibile?\nS√¨. Come detto prima la probabilit√† di riuscirci √® talmente bassa che si pu√≤ dormire sonni molto tranquilli. Nel senso che: √® pi√π probabile avere un incidente d‚Äôauto, ma vedo che la gente non si barrica in casa per questo motivo."
  },
  {
    "objectID": "blog/blockchain.html#blockchain-non-solo-criptovalute-1",
    "href": "blog/blockchain.html#blockchain-non-solo-criptovalute-1",
    "title": "Blockchain: Non Solo Criptovalute",
    "section": "",
    "text": "Ok, le criptovalute come Bitcoin usano la blockchain. Ma la blockchain √® solo criptovaluta o c‚Äô√® altro? Beh che domanda del cavolo‚Ä¶ √® scritto nel titolo Luca.\nUn paio di esempi pratici e concreti:\n\nTracciamento della Filiera Alimentare e Prodotti: Immagina di comprare una bottiglia d‚Äôolio d‚Äôoliva. Grazie alla blockchain, potresti scansionare un codice sulla bottiglia e vedere tutta la storia di quell‚Äôolio: da quale uliveto provengono le olive, in quale frantoio sono state lavorate, quando √® stata imbottigliata, quando √® arrivata al supermercato. Questo rende la filiera pi√π trasparente e aiuta a combattere frodi e prodotti contraffatti. Funziona per il cibo, ma anche per vestiti, medicine, pezzi di ricambio per auto‚Ä¶ qualsiasi cosa compriate per soddisfare i vostri desideri animali. Putridi bestie.\nGestione dell‚ÄôIdentit√† Digitale: Oggi abbiamo tantissime password e identit√† digitali sparse ovunque (social media, banche, siti web‚Ä¶). La blockchain potrebbe permettere di creare un‚Äôunica identit√† digitale sicura e controllata da noi stessi. Invece di dare i nostri dati a ogni sito, potremmo usare la nostra ‚Äúidentit√† blockchain‚Äù per autenticarci, scegliendo quali informazioni condividere e con chi.\nContratti Intelligenti (Smart Contracts): Sono programmi che si attivano automaticamente quando si verificano certe condizioni. Immagina per esempio che l‚Äôolivaio di prima si accorda con il frantumaio. Gli dice: ‚Äúascolta capo, quando mi arrivano i prossimi 3 quintali di olive te li mando per 200 euro, fatta?‚Äù E il frantumaio che sa che l‚Äôolivaio √® un gran raccontaballe gli dice ‚Äúeh no capo‚Ä¶ che l‚Äôultima volta non mi hai mandato un bel niente‚Äù. Allora stipulano uno smart contract che si attiva in automatico, non appena arrivano le olive vengono consegnate. Nello smart contract potrebbe per esempio essere inclusa una penalit√† per cui se l‚Äôolivaio si rifiuta di consegnare le olive paga in automatico una multa. Non una multa che dice ‚Äús√¨ vabb√® sticazzi hai capito tutto, non pago niente‚Äù bens√¨ una multa che viene prelevata in automatico dal conto del signor olivaio.\n\nQuesti sono solo alcuni esempi. Le applicazioni della blockchain sono potenzialmente infinite e ne vengono fuori ogni giorno come i funghi."
  },
  {
    "objectID": "blog/blockchain.html#non-√®-tutto-oro-ci√≤-che-luccica.",
    "href": "blog/blockchain.html#non-√®-tutto-oro-ci√≤-che-luccica.",
    "title": "Blockchain: Non Solo Criptovalute",
    "section": "",
    "text": "Come ogni tecnologia potente, ahim√©, anche la blockchain ha i suoi lati negativi e presenta delle sfide. √à importante conoscerli per avere un quadro completo e non farsi abbagliare solo dai vantaggi.\n\nDecentralizzazione e Attivit√† Illegali: Uno dei punti di forza della blockchain, la decentralizzazione, pu√≤ anche essere un punto debole. Se non c‚Äô√® un‚Äôautorit√† centrale di controllo, diventa pi√π difficile intervenire contro attivit√† illegali. Per esempio:\n\nCrimine Organizzato: Organizzazioni criminali potrebbero usare blockchain e criptovalute per riciclare denaro sporco, finanziare attivit√† illegali, o condurre transazioni non tracciabili. Nessuno saprebbe mai chi ha fatto che cosa.\nEvasione Fiscale: √à pi√π complicato per le autorit√† fiscali monitorare transazioni che avvengono al di fuori dei sistemi bancari tradizionali. Ma se l‚Äôintero sistema fosse gestito da blockchain sarebbe impossibile evadere le tasse visto che ogni transazione sarebbe tracciata e avrebbe delle fee.\nMercati Neri Online: Le blockchain possono facilitare la creazione di mercati online per beni e servizi illegali, come droghe o armi, rendendo pi√π difficile per le forze dell‚Äôordine smantellarli.\n\nOVVIAMENTE: Questo non significa che la blockchain √® fatta per il crimine. Significa che, come qualsiasi strumento, pu√≤ essere usata per scopi positivi e negativi. √à come internet: √® una risorsa fantastica se vi mandate le foto di gattini e i reel della gente che fa incidenti stradali. Ma pu√≤ essere fonte di disinformazione oltre che dei reel di Salvini che mangia le ciliegie (oggi ce l‚Äôho con Salvini perdonatemi).\nMancanza di Regolamentazione: Essendo una tecnologia decentralizzata, la blockchain e le criptovalute non sono regolate. Questo pu√≤ creare problemi:\n\nProtezione dei Consumatori: Se investi in criptovalute e perdi tutto, spesso non c‚Äô√® un‚Äôautorit√† a cui puoi rivolgerti per essere risarcito. Mancano le tutele che esistono nel sistema finanziario tradizionale.\nInstabilit√† e Speculazione: Il valore delle criptovalute √® estremamente volatile, con forti oscillazioni di prezzo. Questo le rende rischiose per gli investimenti e pu√≤ creare bolle speculative.\n\nScalabilit√† e Consumo Energetico: Alcune blockchain, come quella di Bitcoin, hanno problemi di scalabilit√†. Significa che possono gestire un numero limitato di transazioni al secondo. Se troppe persone vogliono usare la blockchain nello stesso momento, le transazioni possono diventare lente e costose. Inoltre, alcune blockchain (come ancora Bitcoin, anche se ci sono alternative pi√π efficienti) consumano molta energia elettrica per funzionare, il che ha un impatto ambientale negativo. Ovviamente questo non vale per tutte le blockchain: sono nati nel tempo metodi decisamente pi√π economici e meno dispendiosi in termini di energia consumata che risolvono parzialmente o totalmente questi problemi.\nRischi per la Sicurezza: Anche se la blockchain √® progettata per essere sicura, non √® immune da attacchi.\n\nAttacchi ‚Äú51%‚Äù: In alcune blockchain, se un singolo soggetto riuscisse a controllare pi√π del 50% della potenza di calcolo della rete, potrebbe teoricamente manipolare le transazioni. Anche se molto difficile, questo tipo di attacco √® un rischio teorico che deve sempre e comunque essere preso in considerazione. Ad esempio una soluzione √® garantirsi di avere il controllo sul 51% fitantoch√© la diffusione della blockchain √® alta a sufficienza da mitigare i rischi.\nSicurezza dei ‚ÄúPortafogli‚Äù Digitali (Wallet): Per usare criptovalute e interagire con la blockchain, si usano dei ‚Äúportafogli‚Äù digitali. Se questi portafogli non sono protetti adeguatamente (es. password deboli, phishing), si rischia di perdere i propri fondi. O anche (ed √® capitato‚Ä¶ ) non essendoci un‚Äôautorit√† centrale a cui fare riferimento se perdete la vostra ‚Äúpassword‚Äù siete fotttuti. Se vi dimenticate la password dell‚Äôaccount facebook dove chattate cone le escort, chiedete a facebook il reset della password e facebook gestisce tutto. Nel mondo blockchain se perdete la vostra chiave privata (\\(\\approx\\) password), basta, that‚Äôs it, siete tagliati fuori dal vostro portafoglio. Anche per questo punto ci sono soluzioni come i portafogli gestiti da autorit√† centrali. Il che per√≤ fa perdere un po‚Äô di senso alla blokchain."
  },
  {
    "objectID": "blog/blockchain.html#quindi",
    "href": "blog/blockchain.html#quindi",
    "title": "Blockchain: Non Solo Criptovalute",
    "section": "",
    "text": "La blockchain √® una tecnologia potenzialmente rivoluzionaria. Non √® assolutamente sinonimo di ‚Äúcriptovalute‚Äù e potrebbe trasformare molti settori attualmente gestiti in maniera tradizionale, dalla finanza alla logistica, dalla sanit√† alla pubblica amministrazione. Offre vantaggi importanti come la trasparenza, la sicurezza, la decentralizzazione e l‚Äôimmutabilit√† dei dati.\nPer√≤, √® fondamentale essere consapevoli anche dei rischi che comporta. La decentralizzazione, che √® un punto di forza, pu√≤ anche essere usata per attivit√† illegali. La mancanza di regolamentazione e la complessit√† tecnica sono ostacoli da superare. Come per ogni innovazione, √® importante un approccio equilibrato: sfruttare le potenzialit√† della blockchain, affrontando i rischi con consapevolezza e lavorando per creare un futuro digitale pi√π sicuro e trasparente per tutti.\nLa blockchain √® ancora in fase di sviluppo. Il futuro dipender√† da come sapremo guidare questa tecnologia e farla evolvere in modo responsabile e sostenibile, massimizzando i benefici e minimizzando i rischi."
  },
  {
    "objectID": "blog/blockchain.html#post-scriptum-e-questo-articolo",
    "href": "blog/blockchain.html#post-scriptum-e-questo-articolo",
    "title": "Blockchain: Non Solo Criptovalute",
    "section": "",
    "text": "Un‚Äôultima riflessione. Avrai notato che io, Luca Simonetti, sono l‚Äôautore di questo articolo. L‚Äôho scritto, l‚Äôho pubblicato (ipoteticamente, eh!). Ora, immagina che tra un‚Äôora io veda la foto della tipa mezza gnuda su instagram, o che cambi idea su qualcosa che ho scritto, o che semplicemente trovi un errore di battitura che mi infastidisce. Posso tranquillamente tornare qui e modificare il cazzo che voglio. Posso cambiare intere frasi, aggiungere o togliere paragrafi, stravolgere il senso di quello che ho detto. E nessuno potrebbe contestare pi√π di tanto la cosa, perch√© l‚Äôautorit√† che gestisce questo contenuto (io, in questo caso) ho il pieno controllo e posso cambiarlo a mio piacimento.\nChi ha letto questo articolo ora, e magari lo rilegge tra qualche ora, potrebbe trovarlo diverso. Non c‚Äô√® un modo per dimostrare quale fosse la versione originale, se non affidandosi alla mia parola (o a servizi esterni che archiviano pagine web, ma che sono comunque ‚Äúesterni‚Äù e non parte integrante dell‚Äôarticolo stesso).\nEcco, questa √® la grande differenza con un‚Äôinformazione registrata su una blockchain. Una volta che un blocco di informazioni viene scritto e ‚Äúsigillato‚Äù sulla catena, non pu√≤ essere modificato retroattivamente in modo furtivo. Ogni modifica lascerebbe una traccia evidente e la versione originale resterebbe sempre verificabile e consultabile da chiunque. Questo articolo, invece, √® soggetto al capriccio del suo autore (ovvero il mio!) e alla natura effimera del web tradizionale. Un piccolo esempio concreto per capire ancora meglio la potenza (e la differenza!) della blockchain.\nSpoiler: questo ultimo paragrafo l‚Äôho aggiunto dopo aver pubblicato la versione originale dell‚Äôarticolo. E se nesusno l‚Äôavesse letto prima e se io non avessi scritto questa roba qui, nessuno l‚Äôavrebbe mai saputo."
  }
]